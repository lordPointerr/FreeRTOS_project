
System_surveillance_niveau_deau.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001e54  00001ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000046f  00800118  00800118  00001f00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049b3  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001327  00000000  00000000  00006d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ddd  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c1c  00000000  00000000  0000ae20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000189a  00000000  00000000  0000ba3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004633  00000000  00000000  0000d2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00011909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_10>
      2c:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e5       	ldi	r30, 0x54	; 84
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a8 e1       	ldi	r26, 0x18	; 24
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 38       	cpi	r26, 0x87	; 135
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <main>
      9e:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <alarms_init>:
#include "FreeRTOS.h"
#include "task.h"


void alarms_init(void) {
	LED_DDR |= (1 << GREEN_PIN) | (1 << YELLOW_PIN) | (1 << RED_PIN);
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	8e 60       	ori	r24, 0x0E	; 14
      aa:	87 b9       	out	0x07, r24	; 7
	BUZZER_DDR |= (1 << BUZZER_PIN);
      ac:	87 b1       	in	r24, 0x07	; 7
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	87 b9       	out	0x07, r24	; 7
      b2:	08 95       	ret

000000b4 <update_alarms>:
}

void update_alarms(WaterLevelState state) {
	static TickType_t last_toggle = 0;
	
	switch(state) {
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	51 f0       	breq	.+20     	; 0xcc <update_alarms+0x18>
      b8:	18 f0       	brcs	.+6      	; 0xc0 <update_alarms+0xc>
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	f9 f0       	breq	.+62     	; 0xfc <update_alarms+0x48>
      be:	08 95       	ret
		case LEVEL_NORMAL:
		PORTC = (1 << GREEN_PIN);
      c0:	82 e0       	ldi	r24, 0x02	; 2
      c2:	88 b9       	out	0x08, r24	; 8
		BUZZER_PORT &= ~(1 << BUZZER_PIN);
      c4:	88 b1       	in	r24, 0x08	; 8
      c6:	8e 7f       	andi	r24, 0xFE	; 254
      c8:	88 b9       	out	0x08, r24	; 8
		break;
      ca:	08 95       	ret
		
		case LEVEL_WARNING:
		PORTC = (1 << YELLOW_PIN);
      cc:	84 e0       	ldi	r24, 0x04	; 4
      ce:	88 b9       	out	0x08, r24	; 8
		if((xTaskGetTickCount() - last_toggle) > pdMS_TO_TICKS(500)) {
      d0:	0e 94 19 09 	call	0x1232	; 0x1232 <xTaskGetTickCount>
      d4:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
      d8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
      dc:	82 1b       	sub	r24, r18
      de:	93 0b       	sbc	r25, r19
      e0:	85 3f       	cpi	r24, 0xF5	; 245
      e2:	91 40       	sbci	r25, 0x01	; 1
      e4:	80 f0       	brcs	.+32     	; 0x106 <update_alarms+0x52>
			BUZZER_PORT ^= (1 << BUZZER_PIN);
      e6:	98 b1       	in	r25, 0x08	; 8
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	89 27       	eor	r24, r25
      ec:	88 b9       	out	0x08, r24	; 8
			last_toggle = xTaskGetTickCount();
      ee:	0e 94 19 09 	call	0x1232	; 0x1232 <xTaskGetTickCount>
      f2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
      f6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
      fa:	08 95       	ret
		}
		break;
		
		case LEVEL_CRITICAL:
		PORTC = (1 << RED_PIN);
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	88 b9       	out	0x08, r24	; 8
		BUZZER_PORT |= (1 << BUZZER_PIN);
     100:	88 b1       	in	r24, 0x08	; 8
     102:	81 60       	ori	r24, 0x01	; 1
     104:	88 b9       	out	0x08, r24	; 8
     106:	08 95       	ret

00000108 <pump_init>:
#include <avr/io.h>
#include "../includes/servo_pump.h"

void pump_init(void){
	//configuring timer2
	TCCR2A |= (1 << COM2A1) | (1 << WGM21) | (1 << WGM20);  // Non-inverting mode (OC2A) + fast PWM + top=0xFF
     108:	e0 eb       	ldi	r30, 0xB0	; 176
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	83 68       	ori	r24, 0x83	; 131
     110:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler 1024
     112:	e1 eb       	ldi	r30, 0xB1	; 177
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	87 60       	ori	r24, 0x07	; 7
     11a:	80 83       	st	Z, r24
     11c:	08 95       	ret

0000011e <set_pump_state>:
}

void set_pump_state(uint8_t state){ //0:off 1:on
	if(state) {
     11e:	88 23       	and	r24, r24
     120:	21 f0       	breq	.+8      	; 0x12a <set_pump_state+0xc>
		OCR2A = 31; // ~2ms pulse (31/255 * 16.4ms ? 2ms)
     122:	8f e1       	ldi	r24, 0x1F	; 31
     124:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     128:	08 95       	ret
	}
	else {
		OCR2A = 16; // ~1ms pulse (16/255 * 16.4ms ? 1ms)
     12a:	80 e1       	ldi	r24, 0x10	; 16
     12c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     130:	08 95       	ret

00000132 <ultrasonic_init>:
volatile uint32_t pulse_end = 0;
volatile uint8_t measurement_ready = 0;

void ultrasonic_init(void){
	// i'll work with timer1 to read the input from the sensor
	TCCR1B |= (1 << ICNC1) | (1 << ICES1) | (1 << CS11); // Noise cancel, rising edge, prescaler 8 (2MHz clk)
     132:	e1 e8       	ldi	r30, 0x81	; 129
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	82 6c       	ori	r24, 0xC2	; 194
     13a:	80 83       	st	Z, r24
	// enabling the input capture interrupt
	TIMSK1 |= (1 << ICIE1);
     13c:	ef e6       	ldi	r30, 0x6F	; 111
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 62       	ori	r24, 0x20	; 32
     144:	80 83       	st	Z, r24
	
	//configure GPIO
	TRIG_DDR |= (1 << TRIG_PIN);  // Trigger as output
     146:	8a b1       	in	r24, 0x0a	; 10
     148:	84 60       	ori	r24, 0x04	; 4
     14a:	8a b9       	out	0x0a, r24	; 10
	ECHO_DDR &= ~(1 << ECHO_PIN); // Echo as input
     14c:	8a b1       	in	r24, 0x0a	; 10
     14e:	8f 7b       	andi	r24, 0xBF	; 191
     150:	8a b9       	out	0x0a, r24	; 10
     152:	08 95       	ret

00000154 <__vector_10>:
}

ISR(TIMER1_CAPT_vect) {
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	8f 93       	push	r24
     160:	9f 93       	push	r25
     162:	af 93       	push	r26
     164:	bf 93       	push	r27
     166:	ef 93       	push	r30
     168:	ff 93       	push	r31
	if (TCCR1B & (1 << ICES1)) { // Rising edge
     16a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     16e:	86 ff       	sbrs	r24, 6
     170:	14 c0       	rjmp	.+40     	; 0x19a <__vector_10+0x46>
		pulse_start = ICR1;
     172:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     176:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <pulse_start>
     182:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <pulse_start+0x1>
     186:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <pulse_start+0x2>
     18a:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <pulse_start+0x3>
		TCCR1B &= ~(1 << ICES1); // Switch to falling edge
     18e:	e1 e8       	ldi	r30, 0x81	; 129
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	8f 7b       	andi	r24, 0xBF	; 191
     196:	80 83       	st	Z, r24
     198:	16 c0       	rjmp	.+44     	; 0x1c6 <__vector_10+0x72>
		} else { // Falling edge
		pulse_end = ICR1;
     19a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     19e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b0 e0       	ldi	r27, 0x00	; 0
     1a6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <pulse_end>
     1aa:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <pulse_end+0x1>
     1ae:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <pulse_end+0x2>
     1b2:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <pulse_end+0x3>
		measurement_ready = 1;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <measurement_ready>
		TCCR1B |= (1 << ICES1); // Switch back to rising edge
     1bc:	e1 e8       	ldi	r30, 0x81	; 129
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	80 64       	ori	r24, 0x40	; 64
     1c4:	80 83       	st	Z, r24
	}
}
     1c6:	ff 91       	pop	r31
     1c8:	ef 91       	pop	r30
     1ca:	bf 91       	pop	r27
     1cc:	af 91       	pop	r26
     1ce:	9f 91       	pop	r25
     1d0:	8f 91       	pop	r24
     1d2:	0f 90       	pop	r0
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	0f 90       	pop	r0
     1d8:	1f 90       	pop	r1
     1da:	18 95       	reti

000001dc <get_water_level_cm>:

float get_water_level_cm() {
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <get_water_level_cm+0xa>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
	// Trigger pulse
	TRIG_PORT |= (1 << TRIG_PIN);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f0:	85 e3       	ldi	r24, 0x35	; 53
     1f2:	8a 95       	dec	r24
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <get_water_level_cm+0x16>
     1f6:	00 00       	nop
	_delay_us(10);
	TRIG_PORT &= ~(1 << TRIG_PIN);
     1f8:	8b b1       	in	r24, 0x0b	; 11
     1fa:	8b 7f       	andi	r24, 0xFB	; 251
     1fc:	8b b9       	out	0x0b, r24	; 11

	// Wait for measurement
	TickType_t xLastWakeTime = xTaskGetTickCount();
     1fe:	0e 94 19 09 	call	0x1232	; 0x1232 <xTaskGetTickCount>
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	89 83       	std	Y+1, r24	; 0x01
	while(!measurement_ready) {
     206:	06 c0       	rjmp	.+12     	; 0x214 <get_water_level_cm+0x38>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1));
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	ce 01       	movw	r24, r28
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	0e 94 16 0b 	call	0x162c	; 0x162c <xTaskDelayUntil>
	_delay_us(10);
	TRIG_PORT &= ~(1 << TRIG_PIN);

	// Wait for measurement
	TickType_t xLastWakeTime = xTaskGetTickCount();
	while(!measurement_ready) {
     214:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <measurement_ready>
     218:	88 23       	and	r24, r24
     21a:	b1 f3       	breq	.-20     	; 0x208 <get_water_level_cm+0x2c>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1));
	}
	
	// Calculate distance
	uint32_t pulse_duration = pulse_end - pulse_start;
     21c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <pulse_end>
     220:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <pulse_end+0x1>
     224:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <pulse_end+0x2>
     228:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <pulse_end+0x3>
     22c:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <pulse_start>
     230:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <pulse_start+0x1>
     234:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <pulse_start+0x2>
     238:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <pulse_start+0x3>
     23c:	bc 01       	movw	r22, r24
     23e:	cd 01       	movw	r24, r26
     240:	60 1b       	sub	r22, r16
     242:	71 0b       	sbc	r23, r17
     244:	82 0b       	sbc	r24, r18
     246:	93 0b       	sbc	r25, r19
	measurement_ready = 0;
     248:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <measurement_ready>
	return (pulse_duration * 0.034) / 2; // cm
     24c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__floatunsisf>
     250:	26 e9       	ldi	r18, 0x96	; 150
     252:	33 e4       	ldi	r19, 0x43	; 67
     254:	4b e0       	ldi	r20, 0x0B	; 11
     256:	5d e3       	ldi	r21, 0x3D	; 61
     258:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__mulsf3>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	5f e3       	ldi	r21, 0x3F	; 63
     264:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__mulsf3>
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	08 95       	ret

00000276 <vListInitialise>:
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );

    traceRETURN_vListInsertEnd();
}
     276:	fc 01       	movw	r30, r24
     278:	03 96       	adiw	r24, 0x03	; 3
     27a:	92 83       	std	Z+2, r25	; 0x02
     27c:	81 83       	std	Z+1, r24	; 0x01
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	3f ef       	ldi	r19, 0xFF	; 255
     282:	34 83       	std	Z+4, r19	; 0x04
     284:	23 83       	std	Z+3, r18	; 0x03
     286:	96 83       	std	Z+6, r25	; 0x06
     288:	85 83       	std	Z+5, r24	; 0x05
     28a:	90 87       	std	Z+8, r25	; 0x08
     28c:	87 83       	std	Z+7, r24	; 0x07
     28e:	10 82       	st	Z, r1
     290:	08 95       	ret

00000292 <vListInitialiseItem>:
     292:	fc 01       	movw	r30, r24
     294:	11 86       	std	Z+9, r1	; 0x09
     296:	10 86       	std	Z+8, r1	; 0x08
     298:	08 95       	ret

0000029a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     2a0:	48 81       	ld	r20, Y
     2a2:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     2a4:	4f 3f       	cpi	r20, 0xFF	; 255
     2a6:	2f ef       	ldi	r18, 0xFF	; 255
     2a8:	52 07       	cpc	r21, r18
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     2ac:	fc 01       	movw	r30, r24
     2ae:	a7 81       	ldd	r26, Z+7	; 0x07
     2b0:	b0 85       	ldd	r27, Z+8	; 0x08
     2b2:	0d c0       	rjmp	.+26     	; 0x2ce <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     2b4:	dc 01       	movw	r26, r24
     2b6:	13 96       	adiw	r26, 0x03	; 3
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <vListInsert+0x22>
     2ba:	df 01       	movw	r26, r30
     2bc:	12 96       	adiw	r26, 0x02	; 2
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	13 97       	sbiw	r26, 0x03	; 3
     2c4:	20 81       	ld	r18, Z
     2c6:	31 81       	ldd	r19, Z+1	; 0x01
     2c8:	42 17       	cp	r20, r18
     2ca:	53 07       	cpc	r21, r19
     2cc:	b0 f7       	brcc	.-20     	; 0x2ba <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     2ce:	12 96       	adiw	r26, 0x02	; 2
     2d0:	ed 91       	ld	r30, X+
     2d2:	fc 91       	ld	r31, X
     2d4:	13 97       	sbiw	r26, 0x03	; 3
     2d6:	fb 83       	std	Y+3, r31	; 0x03
     2d8:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2da:	d5 83       	std	Z+5, r29	; 0x05
     2dc:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     2de:	bd 83       	std	Y+5, r27	; 0x05
     2e0:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     2e2:	13 96       	adiw	r26, 0x03	; 3
     2e4:	dc 93       	st	X, r29
     2e6:	ce 93       	st	-X, r28
     2e8:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     2ea:	99 87       	std	Y+9, r25	; 0x09
     2ec:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 81       	ld	r18, Z
     2f2:	2f 5f       	subi	r18, 0xFF	; 255
     2f4:	20 83       	st	Z, r18

    traceRETURN_vListInsert();
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     302:	a0 85       	ldd	r26, Z+8	; 0x08
     304:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     306:	c2 81       	ldd	r28, Z+2	; 0x02
     308:	d3 81       	ldd	r29, Z+3	; 0x03
     30a:	84 81       	ldd	r24, Z+4	; 0x04
     30c:	95 81       	ldd	r25, Z+5	; 0x05
     30e:	9d 83       	std	Y+5, r25	; 0x05
     310:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     312:	c4 81       	ldd	r28, Z+4	; 0x04
     314:	d5 81       	ldd	r29, Z+5	; 0x05
     316:	82 81       	ldd	r24, Z+2	; 0x02
     318:	93 81       	ldd	r25, Z+3	; 0x03
     31a:	9b 83       	std	Y+3, r25	; 0x03
     31c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     31e:	11 96       	adiw	r26, 0x01	; 1
     320:	8d 91       	ld	r24, X+
     322:	9c 91       	ld	r25, X
     324:	12 97       	sbiw	r26, 0x02	; 2
     326:	e8 17       	cp	r30, r24
     328:	f9 07       	cpc	r31, r25
     32a:	31 f4       	brne	.+12     	; 0x338 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     32c:	84 81       	ldd	r24, Z+4	; 0x04
     32e:	95 81       	ldd	r25, Z+5	; 0x05
     330:	12 96       	adiw	r26, 0x02	; 2
     332:	9c 93       	st	X, r25
     334:	8e 93       	st	-X, r24
     336:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     338:	11 86       	std	Z+9, r1	; 0x09
     33a:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
     33c:	8c 91       	ld	r24, X
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <prvSetupTimerInterrupt>:
    return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     348:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     34c:	89 ef       	ldi	r24, 0xF9	; 249
     34e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     352:	8b e0       	ldi	r24, 0x0B	; 11
     354:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     358:	ef e6       	ldi	r30, 0x6F	; 111
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	80 61       	ori	r24, 0x10	; 16
     360:	80 83       	st	Z, r24
     362:	08 95       	ret

00000364 <pxPortInitialiseStack>:
     364:	31 e1       	ldi	r19, 0x11	; 17
     366:	fc 01       	movw	r30, r24
     368:	30 83       	st	Z, r19
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	22 e2       	ldi	r18, 0x22	; 34
     36e:	20 83       	st	Z, r18
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	a3 e3       	ldi	r26, 0x33	; 51
     374:	a0 83       	st	Z, r26
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	60 83       	st	Z, r22
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	70 83       	st	Z, r23
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	10 82       	st	Z, r1
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	60 e8       	ldi	r22, 0x80	; 128
     386:	60 83       	st	Z, r22
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	10 82       	st	Z, r1
     38c:	31 97       	sbiw	r30, 0x01	; 1
     38e:	62 e0       	ldi	r22, 0x02	; 2
     390:	60 83       	st	Z, r22
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	63 e0       	ldi	r22, 0x03	; 3
     396:	60 83       	st	Z, r22
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	64 e0       	ldi	r22, 0x04	; 4
     39c:	60 83       	st	Z, r22
     39e:	31 97       	sbiw	r30, 0x01	; 1
     3a0:	65 e0       	ldi	r22, 0x05	; 5
     3a2:	60 83       	st	Z, r22
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	66 e0       	ldi	r22, 0x06	; 6
     3a8:	60 83       	st	Z, r22
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	67 e0       	ldi	r22, 0x07	; 7
     3ae:	60 83       	st	Z, r22
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	68 e0       	ldi	r22, 0x08	; 8
     3b4:	60 83       	st	Z, r22
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	69 e0       	ldi	r22, 0x09	; 9
     3ba:	60 83       	st	Z, r22
     3bc:	31 97       	sbiw	r30, 0x01	; 1
     3be:	60 e1       	ldi	r22, 0x10	; 16
     3c0:	60 83       	st	Z, r22
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	30 83       	st	Z, r19
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	32 e1       	ldi	r19, 0x12	; 18
     3ca:	30 83       	st	Z, r19
     3cc:	31 97       	sbiw	r30, 0x01	; 1
     3ce:	33 e1       	ldi	r19, 0x13	; 19
     3d0:	30 83       	st	Z, r19
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	34 e1       	ldi	r19, 0x14	; 20
     3d6:	30 83       	st	Z, r19
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	35 e1       	ldi	r19, 0x15	; 21
     3dc:	30 83       	st	Z, r19
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	36 e1       	ldi	r19, 0x16	; 22
     3e2:	30 83       	st	Z, r19
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	37 e1       	ldi	r19, 0x17	; 23
     3e8:	30 83       	st	Z, r19
     3ea:	31 97       	sbiw	r30, 0x01	; 1
     3ec:	38 e1       	ldi	r19, 0x18	; 24
     3ee:	30 83       	st	Z, r19
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	39 e1       	ldi	r19, 0x19	; 25
     3f4:	30 83       	st	Z, r19
     3f6:	31 97       	sbiw	r30, 0x01	; 1
     3f8:	30 e2       	ldi	r19, 0x20	; 32
     3fa:	30 83       	st	Z, r19
     3fc:	31 97       	sbiw	r30, 0x01	; 1
     3fe:	31 e2       	ldi	r19, 0x21	; 33
     400:	30 83       	st	Z, r19
     402:	31 97       	sbiw	r30, 0x01	; 1
     404:	20 83       	st	Z, r18
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	23 e2       	ldi	r18, 0x23	; 35
     40a:	20 83       	st	Z, r18
     40c:	31 97       	sbiw	r30, 0x01	; 1
     40e:	40 83       	st	Z, r20
     410:	31 97       	sbiw	r30, 0x01	; 1
     412:	50 83       	st	Z, r21
     414:	31 97       	sbiw	r30, 0x01	; 1
     416:	26 e2       	ldi	r18, 0x26	; 38
     418:	20 83       	st	Z, r18
     41a:	31 97       	sbiw	r30, 0x01	; 1
     41c:	27 e2       	ldi	r18, 0x27	; 39
     41e:	20 83       	st	Z, r18
     420:	31 97       	sbiw	r30, 0x01	; 1
     422:	28 e2       	ldi	r18, 0x28	; 40
     424:	20 83       	st	Z, r18
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	29 e2       	ldi	r18, 0x29	; 41
     42a:	20 83       	st	Z, r18
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	20 e3       	ldi	r18, 0x30	; 48
     430:	20 83       	st	Z, r18
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	21 e3       	ldi	r18, 0x31	; 49
     436:	20 83       	st	Z, r18
     438:	86 97       	sbiw	r24, 0x26	; 38
     43a:	08 95       	ret

0000043c <xPortStartScheduler>:
     43c:	0e 94 a4 01 	call	0x348	; 0x348 <prvSetupTimerInterrupt>
     440:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <pxCurrentTCB>
     444:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     448:	cd 91       	ld	r28, X+
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	dd 91       	ld	r29, X+
     44e:	de bf       	out	0x3e, r29	; 62
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	bf 91       	pop	r27
     45a:	af 91       	pop	r26
     45c:	9f 91       	pop	r25
     45e:	8f 91       	pop	r24
     460:	7f 91       	pop	r23
     462:	6f 91       	pop	r22
     464:	5f 91       	pop	r21
     466:	4f 91       	pop	r20
     468:	3f 91       	pop	r19
     46a:	2f 91       	pop	r18
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	bf 90       	pop	r11
     47a:	af 90       	pop	r10
     47c:	9f 90       	pop	r9
     47e:	8f 90       	pop	r8
     480:	7f 90       	pop	r7
     482:	6f 90       	pop	r6
     484:	5f 90       	pop	r5
     486:	4f 90       	pop	r4
     488:	3f 90       	pop	r3
     48a:	2f 90       	pop	r2
     48c:	1f 90       	pop	r1
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	08 95       	ret
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	08 95       	ret

0000049a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	0f 92       	push	r0
     4a2:	1f 92       	push	r1
     4a4:	11 24       	eor	r1, r1
     4a6:	2f 92       	push	r2
     4a8:	3f 92       	push	r3
     4aa:	4f 92       	push	r4
     4ac:	5f 92       	push	r5
     4ae:	6f 92       	push	r6
     4b0:	7f 92       	push	r7
     4b2:	8f 92       	push	r8
     4b4:	9f 92       	push	r9
     4b6:	af 92       	push	r10
     4b8:	bf 92       	push	r11
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
     4e2:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <pxCurrentTCB>
     4e6:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     4ea:	0d b6       	in	r0, 0x3d	; 61
     4ec:	0d 92       	st	X+, r0
     4ee:	0e b6       	in	r0, 0x3e	; 62
     4f0:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     4f2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     4f6:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <pxCurrentTCB>
     4fa:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     4fe:	cd 91       	ld	r28, X+
     500:	cd bf       	out	0x3d, r28	; 61
     502:	dd 91       	ld	r29, X+
     504:	de bf       	out	0x3e, r29	; 62
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	bf 90       	pop	r11
     530:	af 90       	pop	r10
     532:	9f 90       	pop	r9
     534:	8f 90       	pop	r8
     536:	7f 90       	pop	r7
     538:	6f 90       	pop	r6
     53a:	5f 90       	pop	r5
     53c:	4f 90       	pop	r4
     53e:	3f 90       	pop	r3
     540:	2f 90       	pop	r2
     542:	1f 90       	pop	r1
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0

    asm volatile ( "ret" );
     54a:	08 95       	ret

0000054c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	0f 92       	push	r0
     554:	1f 92       	push	r1
     556:	11 24       	eor	r1, r1
     558:	2f 92       	push	r2
     55a:	3f 92       	push	r3
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
     594:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <pxCurrentTCB>
     598:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     59c:	0d b6       	in	r0, 0x3d	; 61
     59e:	0d 92       	st	X+, r0
     5a0:	0e b6       	in	r0, 0x3e	; 62
     5a2:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
     5a4:	0e 94 23 09 	call	0x1246	; 0x1246 <xTaskIncrementTick>
     5a8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     5aa:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     5ae:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <pxCurrentTCB>
     5b2:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     5b6:	cd 91       	ld	r28, X+
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	dd 91       	ld	r29, X+
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	ff 91       	pop	r31
     5c0:	ef 91       	pop	r30
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	bf 90       	pop	r11
     5e8:	af 90       	pop	r10
     5ea:	9f 90       	pop	r9
     5ec:	8f 90       	pop	r8
     5ee:	7f 90       	pop	r7
     5f0:	6f 90       	pop	r6
     5f2:	5f 90       	pop	r5
     5f4:	4f 90       	pop	r4
     5f6:	3f 90       	pop	r3
     5f8:	2f 90       	pop	r2
     5fa:	1f 90       	pop	r1
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0

    asm volatile ( "ret" );
     602:	08 95       	ret

00000604 <__vector_11>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
     604:	0e 94 a6 02 	call	0x54c	; 0x54c <vPortYieldFromTick>
        asm volatile ( "reti" );
     608:	18 95       	reti

0000060a <prvHeapInit>:
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
     60a:	a1 e3       	ldi	r26, 0x31	; 49
     60c:	b1 e0       	ldi	r27, 0x01	; 1
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
     60e:	ed e2       	ldi	r30, 0x2D	; 45
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	b1 83       	std	Z+1, r27	; 0x01
     614:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     616:	13 82       	std	Z+3, r1	; 0x03
     618:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
     61a:	ed e2       	ldi	r30, 0x2D	; 45
     61c:	f5 e0       	ldi	r31, 0x05	; 5
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( BlockLink_t * ) uxEndAddress;
     61e:	f0 93 2c 01 	sts	0x012C, r31	; 0x80012c <pxEnd+0x1>
     622:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <pxEnd>
    pxEnd->xBlockSize = 0;
     626:	13 82       	std	Z+3, r1	; 0x03
     628:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
     62a:	11 82       	std	Z+1, r1	; 0x01
     62c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
     62e:	8c ef       	ldi	r24, 0xFC	; 252
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	13 96       	adiw	r26, 0x03	; 3
     634:	9c 93       	st	X, r25
     636:	8e 93       	st	-X, r24
     638:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
     63a:	ed 93       	st	X+, r30
     63c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     63e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <xMinimumEverFreeBytesRemaining+0x1>
     642:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     646:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <xFreeBytesRemaining+0x1>
     64a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <xFreeBytesRemaining>
     64e:	08 95       	ret

00000650 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
     656:	ad e2       	ldi	r26, 0x2D	; 45
     658:	b1 e0       	ldi	r27, 0x01	; 1
     65a:	01 c0       	rjmp	.+2      	; 0x65e <prvInsertBlockIntoFreeList+0xe>
     65c:	df 01       	movw	r26, r30
     65e:	ed 91       	ld	r30, X+
     660:	fc 91       	ld	r31, X
     662:	11 97       	sbiw	r26, 0x01	; 1
     664:	ec 17       	cp	r30, r28
     666:	fd 07       	cpc	r31, r29
     668:	c8 f3       	brcs	.-14     	; 0x65c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	8d 91       	ld	r24, X+
     66e:	9c 91       	ld	r25, X
     670:	13 97       	sbiw	r26, 0x03	; 3
     672:	9d 01       	movw	r18, r26
     674:	28 0f       	add	r18, r24
     676:	39 1f       	adc	r19, r25
     678:	c2 17       	cp	r28, r18
     67a:	d3 07       	cpc	r29, r19
     67c:	49 f4       	brne	.+18     	; 0x690 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     67e:	2a 81       	ldd	r18, Y+2	; 0x02
     680:	3b 81       	ldd	r19, Y+3	; 0x03
     682:	82 0f       	add	r24, r18
     684:	93 1f       	adc	r25, r19
     686:	13 96       	adiw	r26, 0x03	; 3
     688:	9c 93       	st	X, r25
     68a:	8e 93       	st	-X, r24
     68c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     68e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	9b 81       	ldd	r25, Y+3	; 0x03
     694:	9e 01       	movw	r18, r28
     696:	28 0f       	add	r18, r24
     698:	39 1f       	adc	r19, r25
     69a:	e2 17       	cp	r30, r18
     69c:	f3 07       	cpc	r31, r19
     69e:	c1 f4       	brne	.+48     	; 0x6d0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
     6a0:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <pxEnd>
     6a4:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <pxEnd+0x1>
     6a8:	e2 17       	cp	r30, r18
     6aa:	f3 07       	cpc	r31, r19
     6ac:	71 f0       	breq	.+28     	; 0x6ca <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
     6ae:	22 81       	ldd	r18, Z+2	; 0x02
     6b0:	33 81       	ldd	r19, Z+3	; 0x03
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	9b 83       	std	Y+3, r25	; 0x03
     6b8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	11 97       	sbiw	r26, 0x01	; 1
     6c0:	80 81       	ld	r24, Z
     6c2:	91 81       	ldd	r25, Z+1	; 0x01
     6c4:	99 83       	std	Y+1, r25	; 0x01
     6c6:	88 83       	st	Y, r24
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
     6ca:	39 83       	std	Y+1, r19	; 0x01
     6cc:	28 83       	st	Y, r18
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6d0:	f9 83       	std	Y+1, r31	; 0x01
     6d2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6d4:	ca 17       	cp	r28, r26
     6d6:	db 07       	cpc	r29, r27
     6d8:	11 f0       	breq	.+4      	; 0x6de <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
     6da:	cd 93       	st	X+, r28
     6dc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
     6ee:	89 2b       	or	r24, r25
     6f0:	41 f0       	breq	.+16     	; 0x702 <pvPortMalloc+0x1e>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
     6f2:	cc 3f       	cpi	r28, 0xFC	; 252
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	d8 07       	cpc	r29, r24
     6f8:	10 f4       	brcc	.+4      	; 0x6fe <pvPortMalloc+0x1a>
        {
            xWantedSize += xHeapStructSize;
     6fa:	24 96       	adiw	r28, 0x04	; 4
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <pvPortMalloc+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
     6fe:	c0 e0       	ldi	r28, 0x00	; 0
     700:	d0 e0       	ldi	r29, 0x00	; 0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
     702:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     706:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxEnd>
     70a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxEnd+0x1>
     70e:	89 2b       	or	r24, r25
     710:	11 f4       	brne	.+4      	; 0x716 <pvPortMalloc+0x32>
        {
            prvHeapInit();
     712:	0e 94 05 03 	call	0x60a	; 0x60a <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     716:	dd 23       	and	r29, r29
     718:	0c f4       	brge	.+2      	; 0x71c <pvPortMalloc+0x38>
     71a:	6c c0       	rjmp	.+216    	; 0x7f4 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     71c:	20 97       	sbiw	r28, 0x00	; 0
     71e:	09 f4       	brne	.+2      	; 0x722 <pvPortMalloc+0x3e>
     720:	6c c0       	rjmp	.+216    	; 0x7fa <pvPortMalloc+0x116>
     722:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <xFreeBytesRemaining>
     726:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <xFreeBytesRemaining+0x1>
     72a:	2c 17       	cp	r18, r28
     72c:	3d 07       	cpc	r19, r29
     72e:	08 f4       	brcc	.+2      	; 0x732 <pvPortMalloc+0x4e>
     730:	67 c0       	rjmp	.+206    	; 0x800 <__DATA_REGION_LENGTH__>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
     732:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <xStart>
     736:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     73a:	6d e2       	ldi	r22, 0x2D	; 45
     73c:	71 e0       	ldi	r23, 0x01	; 1
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
     73e:	02 c0       	rjmp	.+4      	; 0x744 <pvPortMalloc+0x60>
                {
                    pxPreviousBlock = pxBlock;
     740:	bf 01       	movw	r22, r30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
     742:	fc 01       	movw	r30, r24
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	8c 17       	cp	r24, r28
     74a:	9d 07       	cpc	r25, r29
     74c:	20 f4       	brcc	.+8      	; 0x756 <pvPortMalloc+0x72>
     74e:	80 81       	ld	r24, Z
     750:	91 81       	ldd	r25, Z+1	; 0x01
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	a9 f7       	brne	.-22     	; 0x740 <pvPortMalloc+0x5c>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     756:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxEnd>
     75a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxEnd+0x1>
     75e:	e8 17       	cp	r30, r24
     760:	f9 07       	cpc	r31, r25
     762:	09 f4       	brne	.+2      	; 0x766 <pvPortMalloc+0x82>
     764:	50 c0       	rjmp	.+160    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
     766:	db 01       	movw	r26, r22
     768:	0d 91       	ld	r16, X+
     76a:	1c 91       	ld	r17, X
     76c:	11 97       	sbiw	r26, 0x01	; 1
     76e:	0c 5f       	subi	r16, 0xFC	; 252
     770:	1f 4f       	sbci	r17, 0xFF	; 255
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     772:	80 81       	ld	r24, Z
     774:	91 81       	ldd	r25, Z+1	; 0x01
     776:	8d 93       	st	X+, r24
     778:	9c 93       	st	X, r25

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	8c 1b       	sub	r24, r28
     780:	9d 0b       	sbc	r25, r29
     782:	89 30       	cpi	r24, 0x09	; 9
     784:	91 05       	cpc	r25, r1
     786:	98 f0       	brcs	.+38     	; 0x7ae <pvPortMalloc+0xca>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     788:	af 01       	movw	r20, r30
     78a:	4c 0f       	add	r20, r28
     78c:	5d 1f       	adc	r21, r29
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     78e:	da 01       	movw	r26, r20
     790:	13 96       	adiw	r26, 0x03	; 3
     792:	9c 93       	st	X, r25
     794:	8e 93       	st	-X, r24
     796:	12 97       	sbiw	r26, 0x02	; 2
                        pxBlock->xBlockSize = xWantedSize;
     798:	d3 83       	std	Z+3, r29	; 0x03
     79a:	c2 83       	std	Z+2, r28	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
     79c:	db 01       	movw	r26, r22
     79e:	8d 91       	ld	r24, X+
     7a0:	9c 91       	ld	r25, X
     7a2:	da 01       	movw	r26, r20
     7a4:	8d 93       	st	X+, r24
     7a6:	9c 93       	st	X, r25
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
     7a8:	db 01       	movw	r26, r22
     7aa:	4d 93       	st	X+, r20
     7ac:	5c 93       	st	X, r21
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7ae:	42 81       	ldd	r20, Z+2	; 0x02
     7b0:	53 81       	ldd	r21, Z+3	; 0x03
     7b2:	c9 01       	movw	r24, r18
     7b4:	84 1b       	sub	r24, r20
     7b6:	95 0b       	sbc	r25, r21
     7b8:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <xFreeBytesRemaining+0x1>
     7bc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     7c0:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <xMinimumEverFreeBytesRemaining>
     7c4:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <xMinimumEverFreeBytesRemaining+0x1>
     7c8:	82 17       	cp	r24, r18
     7ca:	93 07       	cpc	r25, r19
     7cc:	20 f4       	brcc	.+8      	; 0x7d6 <pvPortMalloc+0xf2>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     7ce:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <xMinimumEverFreeBytesRemaining+0x1>
     7d2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     7d6:	50 68       	ori	r21, 0x80	; 128
     7d8:	53 83       	std	Z+3, r21	; 0x03
     7da:	42 83       	std	Z+2, r20	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     7dc:	11 82       	std	Z+1, r1	; 0x01
     7de:	10 82       	st	Z, r1
                    xNumberOfSuccessfulAllocations++;
     7e0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <xNumberOfSuccessfulAllocations>
     7e4:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <xNumberOfSuccessfulAllocations+0x1>
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <xNumberOfSuccessfulAllocations+0x1>
     7ee:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <xNumberOfSuccessfulAllocations>
     7f2:	0b c0       	rjmp	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	10 e0       	ldi	r17, 0x00	; 0
     7f8:	08 c0       	rjmp	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7fa:	00 e0       	ldi	r16, 0x00	; 0
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     800:	00 e0       	ldi	r16, 0x00	; 0
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     80a:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     80e:	01 15       	cp	r16, r1
     810:	11 05       	cpc	r17, r1
     812:	11 f4       	brne	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
        {
            vApplicationMallocFailedHook();
     814:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <vApplicationMallocFailedHook>
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     818:	c8 01       	movw	r24, r16
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	49 f1       	breq	.+82     	; 0x882 <vPortFree+0x5e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     830:	ec 01       	movw	r28, r24
     832:	24 97       	sbiw	r28, 0x04	; 4

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     834:	2a 81       	ldd	r18, Y+2	; 0x02
     836:	3b 81       	ldd	r19, Y+3	; 0x03
     838:	33 23       	and	r19, r19
     83a:	1c f5       	brge	.+70     	; 0x882 <vPortFree+0x5e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     83c:	48 81       	ld	r20, Y
     83e:	59 81       	ldd	r21, Y+1	; 0x01
     840:	45 2b       	or	r20, r21
     842:	f9 f4       	brne	.+62     	; 0x882 <vPortFree+0x5e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     844:	3f 77       	andi	r19, 0x7F	; 127
     846:	3b 83       	std	Y+3, r19	; 0x03
     848:	2a 83       	std	Y+2, r18	; 0x02
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
     84a:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	9b 81       	ldd	r25, Y+3	; 0x03
     852:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <xFreeBytesRemaining>
     856:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <xFreeBytesRemaining+0x1>
     85a:	82 0f       	add	r24, r18
     85c:	93 1f       	adc	r25, r19
     85e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <xFreeBytesRemaining+0x1>
     862:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     866:	ce 01       	movw	r24, r28
     868:	0e 94 28 03 	call	0x650	; 0x650 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     86c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <xNumberOfSuccessfulFrees>
     870:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <xNumberOfSuccessfulFrees+0x1>
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <xNumberOfSuccessfulFrees+0x1>
     87a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     87e:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	08 95       	ret

0000088c <prvIsQueueEmpty>:
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
}
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	0f 92       	push	r0
     892:	fc 01       	movw	r30, r24
     894:	82 8d       	ldd	r24, Z+26	; 0x1a
     896:	81 11       	cpse	r24, r1
     898:	02 c0       	rjmp	.+4      	; 0x89e <prvIsQueueEmpty+0x12>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <prvIsQueueEmpty+0x14>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	08 95       	ret

000008a6 <prvIsQueueFull>:
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	0f 92       	push	r0
     8ac:	fc 01       	movw	r30, r24
     8ae:	22 8d       	ldd	r18, Z+26	; 0x1a
     8b0:	83 8d       	ldd	r24, Z+27	; 0x1b
     8b2:	28 13       	cpse	r18, r24
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <prvIsQueueFull+0x14>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <prvIsQueueFull+0x16>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	08 95       	ret

000008c2 <prvCopyDataToQueue>:
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	04 2f       	mov	r16, r20
     8ce:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8d2:	44 23       	and	r20, r20
     8d4:	b9 f1       	breq	.+110    	; 0x944 <__stack+0x45>
     8d6:	01 11       	cpse	r16, r1
     8d8:	16 c0       	rjmp	.+44     	; 0x906 <__stack+0x7>
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	9b 81       	ldd	r25, Y+3	; 0x03
     8e0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <memcpy>
     8e4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	82 0f       	add	r24, r18
     8ec:	91 1d       	adc	r25, r1
     8ee:	9b 83       	std	Y+3, r25	; 0x03
     8f0:	8a 83       	std	Y+2, r24	; 0x02
     8f2:	2c 81       	ldd	r18, Y+4	; 0x04
     8f4:	3d 81       	ldd	r19, Y+5	; 0x05
     8f6:	82 17       	cp	r24, r18
     8f8:	93 07       	cpc	r25, r19
     8fa:	20 f1       	brcs	.+72     	; 0x944 <__stack+0x45>
     8fc:	88 81       	ld	r24, Y
     8fe:	99 81       	ldd	r25, Y+1	; 0x01
     900:	9b 83       	std	Y+3, r25	; 0x03
     902:	8a 83       	std	Y+2, r24	; 0x02
     904:	1f c0       	rjmp	.+62     	; 0x944 <__stack+0x45>
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	8e 81       	ldd	r24, Y+6	; 0x06
     90a:	9f 81       	ldd	r25, Y+7	; 0x07
     90c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <memcpy>
     910:	8c 8d       	ldd	r24, Y+28	; 0x1c
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	91 95       	neg	r25
     916:	81 95       	neg	r24
     918:	91 09       	sbc	r25, r1
     91a:	2e 81       	ldd	r18, Y+6	; 0x06
     91c:	3f 81       	ldd	r19, Y+7	; 0x07
     91e:	28 0f       	add	r18, r24
     920:	39 1f       	adc	r19, r25
     922:	3f 83       	std	Y+7, r19	; 0x07
     924:	2e 83       	std	Y+6, r18	; 0x06
     926:	48 81       	ld	r20, Y
     928:	59 81       	ldd	r21, Y+1	; 0x01
     92a:	24 17       	cp	r18, r20
     92c:	35 07       	cpc	r19, r21
     92e:	30 f4       	brcc	.+12     	; 0x93c <__stack+0x3d>
     930:	2c 81       	ldd	r18, Y+4	; 0x04
     932:	3d 81       	ldd	r19, Y+5	; 0x05
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	9f 83       	std	Y+7, r25	; 0x07
     93a:	8e 83       	std	Y+6, r24	; 0x06
     93c:	02 30       	cpi	r16, 0x02	; 2
     93e:	11 f4       	brne	.+4      	; 0x944 <__stack+0x45>
     940:	11 11       	cpse	r17, r1
     942:	11 50       	subi	r17, 0x01	; 1
     944:	1f 5f       	subi	r17, 0xFF	; 255
     946:	1a 8f       	std	Y+26, r17	; 0x1a
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <prvCopyDataFromQueue>:
     954:	fc 01       	movw	r30, r24
     956:	44 8d       	ldd	r20, Z+28	; 0x1c
     958:	44 23       	and	r20, r20
     95a:	a9 f0       	breq	.+42     	; 0x986 <prvCopyDataFromQueue+0x32>
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	26 81       	ldd	r18, Z+6	; 0x06
     960:	37 81       	ldd	r19, Z+7	; 0x07
     962:	24 0f       	add	r18, r20
     964:	35 1f       	adc	r19, r21
     966:	37 83       	std	Z+7, r19	; 0x07
     968:	26 83       	std	Z+6, r18	; 0x06
     96a:	84 81       	ldd	r24, Z+4	; 0x04
     96c:	95 81       	ldd	r25, Z+5	; 0x05
     96e:	28 17       	cp	r18, r24
     970:	39 07       	cpc	r19, r25
     972:	20 f0       	brcs	.+8      	; 0x97c <prvCopyDataFromQueue+0x28>
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	97 83       	std	Z+7, r25	; 0x07
     97a:	86 83       	std	Z+6, r24	; 0x06
     97c:	cb 01       	movw	r24, r22
     97e:	66 81       	ldd	r22, Z+6	; 0x06
     980:	77 81       	ldd	r23, Z+7	; 0x07
     982:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <memcpy>
     986:	08 95       	ret

00000988 <prvUnlockQueue>:
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	0f 92       	push	r0
     996:	1e 8d       	ldd	r17, Y+30	; 0x1e
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <prvUnlockQueue+0x28>
     99a:	89 89       	ldd	r24, Y+17	; 0x11
     99c:	88 23       	and	r24, r24
     99e:	51 f0       	breq	.+20     	; 0x9b4 <prvUnlockQueue+0x2c>
     9a0:	ce 01       	movw	r24, r28
     9a2:	41 96       	adiw	r24, 0x11	; 17
     9a4:	0e 94 19 0c 	call	0x1832	; 0x1832 <xTaskRemoveFromEventList>
     9a8:	81 11       	cpse	r24, r1
     9aa:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vTaskMissedYield>
     9ae:	11 50       	subi	r17, 0x01	; 1
     9b0:	11 16       	cp	r1, r17
     9b2:	9c f3       	brlt	.-26     	; 0x99a <prvUnlockQueue+0x12>
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	8e 8f       	std	Y+30, r24	; 0x1e
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	0f 92       	push	r0
     9c2:	1d 8d       	ldd	r17, Y+29	; 0x1d
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <prvUnlockQueue+0x54>
     9c6:	88 85       	ldd	r24, Y+8	; 0x08
     9c8:	88 23       	and	r24, r24
     9ca:	51 f0       	breq	.+20     	; 0x9e0 <prvUnlockQueue+0x58>
     9cc:	ce 01       	movw	r24, r28
     9ce:	08 96       	adiw	r24, 0x08	; 8
     9d0:	0e 94 19 0c 	call	0x1832	; 0x1832 <xTaskRemoveFromEventList>
     9d4:	81 11       	cpse	r24, r1
     9d6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vTaskMissedYield>
     9da:	11 50       	subi	r17, 0x01	; 1
     9dc:	11 16       	cp	r1, r17
     9de:	9c f3       	brlt	.-26     	; 0x9c6 <prvUnlockQueue+0x3e>
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	8d 8f       	std	Y+29, r24	; 0x1d
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	08 95       	ret

000009f0 <xQueueGenericReset>:
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	fc 01       	movw	r30, r24
     9fa:	36 2f       	mov	r19, r22
     9fc:	89 2b       	or	r24, r25
     9fe:	09 f4       	brne	.+2      	; 0xa02 <xQueueGenericReset+0x12>
     a00:	4d c0       	rjmp	.+154    	; 0xa9c <xQueueGenericReset+0xac>
     a02:	23 8d       	ldd	r18, Z+27	; 0x1b
     a04:	22 23       	and	r18, r18
     a06:	09 f4       	brne	.+2      	; 0xa0a <xQueueGenericReset+0x1a>
     a08:	4b c0       	rjmp	.+150    	; 0xaa0 <xQueueGenericReset+0xb0>
     a0a:	02 2f       	mov	r16, r18
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	9f ef       	ldi	r25, 0xFF	; 255
     a12:	b8 01       	movw	r22, r16
     a14:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__udivmodhi4>
     a18:	44 8d       	ldd	r20, Z+28	; 0x1c
     a1a:	84 2f       	mov	r24, r20
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	68 17       	cp	r22, r24
     a20:	79 07       	cpc	r23, r25
     a22:	08 f4       	brcc	.+2      	; 0xa26 <xQueueGenericReset+0x36>
     a24:	3f c0       	rjmp	.+126    	; 0xaa4 <xQueueGenericReset+0xb4>
     a26:	ef 01       	movw	r28, r30
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	0f 92       	push	r0
     a2e:	60 81       	ld	r22, Z
     a30:	71 81       	ldd	r23, Z+1	; 0x01
     a32:	fb 01       	movw	r30, r22
     a34:	24 9f       	mul	r18, r20
     a36:	e0 0d       	add	r30, r0
     a38:	f1 1d       	adc	r31, r1
     a3a:	11 24       	eor	r1, r1
     a3c:	fd 83       	std	Y+5, r31	; 0x05
     a3e:	ec 83       	std	Y+4, r30	; 0x04
     a40:	1a 8e       	std	Y+26, r1	; 0x1a
     a42:	7b 83       	std	Y+3, r23	; 0x03
     a44:	6a 83       	std	Y+2, r22	; 0x02
     a46:	01 50       	subi	r16, 0x01	; 1
     a48:	11 09       	sbc	r17, r1
     a4a:	80 9f       	mul	r24, r16
     a4c:	a0 01       	movw	r20, r0
     a4e:	81 9f       	mul	r24, r17
     a50:	50 0d       	add	r21, r0
     a52:	90 9f       	mul	r25, r16
     a54:	50 0d       	add	r21, r0
     a56:	11 24       	eor	r1, r1
     a58:	cb 01       	movw	r24, r22
     a5a:	84 0f       	add	r24, r20
     a5c:	95 1f       	adc	r25, r21
     a5e:	9f 83       	std	Y+7, r25	; 0x07
     a60:	8e 83       	std	Y+6, r24	; 0x06
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	8d 8f       	std	Y+29, r24	; 0x1d
     a66:	8e 8f       	std	Y+30, r24	; 0x1e
     a68:	31 11       	cpse	r19, r1
     a6a:	0c c0       	rjmp	.+24     	; 0xa84 <xQueueGenericReset+0x94>
     a6c:	88 85       	ldd	r24, Y+8	; 0x08
     a6e:	88 23       	and	r24, r24
     a70:	89 f0       	breq	.+34     	; 0xa94 <xQueueGenericReset+0xa4>
     a72:	ce 01       	movw	r24, r28
     a74:	08 96       	adiw	r24, 0x08	; 8
     a76:	0e 94 19 0c 	call	0x1832	; 0x1832 <xTaskRemoveFromEventList>
     a7a:	88 23       	and	r24, r24
     a7c:	59 f0       	breq	.+22     	; 0xa94 <xQueueGenericReset+0xa4>
     a7e:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
     a82:	08 c0       	rjmp	.+16     	; 0xa94 <xQueueGenericReset+0xa4>
     a84:	ce 01       	movw	r24, r28
     a86:	08 96       	adiw	r24, 0x08	; 8
     a88:	0e 94 3b 01 	call	0x276	; 0x276 <vListInitialise>
     a8c:	ce 01       	movw	r24, r28
     a8e:	41 96       	adiw	r24, 0x11	; 17
     a90:	0e 94 3b 01 	call	0x276	; 0x276 <vListInitialise>
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <xQueueGenericReset+0xb6>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <xQueueGenericReset+0xb6>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <xQueueGenericReset+0xb6>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <prvInitialiseNewQueue>:
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	f8 01       	movw	r30, r16
     ab6:	61 11       	cpse	r22, r1
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <prvInitialiseNewQueue+0x10>
     aba:	11 83       	std	Z+1, r17	; 0x01
     abc:	00 83       	st	Z, r16
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <prvInitialiseNewQueue+0x14>
     ac0:	51 83       	std	Z+1, r21	; 0x01
     ac2:	40 83       	st	Z, r20
     ac4:	83 8f       	std	Z+27, r24	; 0x1b
     ac6:	64 8f       	std	Z+28, r22	; 0x1c
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	cf 01       	movw	r24, r30
     acc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <xQueueGenericReset>
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <xQueueGenericCreate>:
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	38 2f       	mov	r19, r24
     ae6:	e6 2f       	mov	r30, r22
     ae8:	88 23       	and	r24, r24
     aea:	29 f1       	breq	.+74     	; 0xb36 <xQueueGenericCreate+0x60>
     aec:	e8 2e       	mov	r14, r24
     aee:	f1 2c       	mov	r15, r1
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	b7 01       	movw	r22, r14
     af6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__udivmodhi4>
     afa:	ae 2f       	mov	r26, r30
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	6a 17       	cp	r22, r26
     b00:	7b 07       	cpc	r23, r27
     b02:	e0 f0       	brcs	.+56     	; 0xb3c <xQueueGenericCreate+0x66>
     b04:	3e 9f       	mul	r19, r30
     b06:	c0 01       	movw	r24, r0
     b08:	11 24       	eor	r1, r1
     b0a:	81 3e       	cpi	r24, 0xE1	; 225
     b0c:	91 05       	cpc	r25, r1
     b0e:	cc f4       	brge	.+50     	; 0xb42 <xQueueGenericCreate+0x6c>
     b10:	d4 2e       	mov	r13, r20
     b12:	de 2f       	mov	r29, r30
     b14:	c3 2f       	mov	r28, r19
     b16:	4f 96       	adiw	r24, 0x1f	; 31
     b18:	0e 94 72 03 	call	0x6e4	; 0x6e4 <pvPortMalloc>
     b1c:	7c 01       	movw	r14, r24
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	91 f0       	breq	.+36     	; 0xb46 <xQueueGenericCreate+0x70>
     b22:	8c 01       	movw	r16, r24
     b24:	2d 2d       	mov	r18, r13
     b26:	ac 01       	movw	r20, r24
     b28:	41 5e       	subi	r20, 0xE1	; 225
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	6d 2f       	mov	r22, r29
     b2e:	8c 2f       	mov	r24, r28
     b30:	0e 94 58 05 	call	0xab0	; 0xab0 <prvInitialiseNewQueue>
     b34:	08 c0       	rjmp	.+16     	; 0xb46 <xQueueGenericCreate+0x70>
     b36:	e1 2c       	mov	r14, r1
     b38:	f1 2c       	mov	r15, r1
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <xQueueGenericCreate+0x70>
     b3c:	e1 2c       	mov	r14, r1
     b3e:	f1 2c       	mov	r15, r1
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <xQueueGenericCreate+0x70>
     b42:	e1 2c       	mov	r14, r1
     b44:	f1 2c       	mov	r15, r1
     b46:	c7 01       	movw	r24, r14
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	08 95       	ret

00000b58 <xQueueGenericSend>:
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <xQueueGenericSend+0x12>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <xQueueGenericSend+0x14>
     b6c:	1f 92       	push	r1
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	8c 01       	movw	r16, r24
     b74:	7b 01       	movw	r14, r22
     b76:	5d 83       	std	Y+5, r21	; 0x05
     b78:	4c 83       	std	Y+4, r20	; 0x04
     b7a:	c2 2e       	mov	r12, r18
     b7c:	d1 2c       	mov	r13, r1
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	0f 92       	push	r0
     b84:	f8 01       	movw	r30, r16
     b86:	92 8d       	ldd	r25, Z+26	; 0x1a
     b88:	83 8d       	ldd	r24, Z+27	; 0x1b
     b8a:	98 17       	cp	r25, r24
     b8c:	18 f0       	brcs	.+6      	; 0xb94 <xQueueGenericSend+0x3c>
     b8e:	f2 e0       	ldi	r31, 0x02	; 2
     b90:	cf 12       	cpse	r12, r31
     b92:	19 c0       	rjmp	.+50     	; 0xbc6 <xQueueGenericSend+0x6e>
     b94:	4c 2d       	mov	r20, r12
     b96:	b7 01       	movw	r22, r14
     b98:	c8 01       	movw	r24, r16
     b9a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <prvCopyDataToQueue>
     b9e:	f8 01       	movw	r30, r16
     ba0:	91 89       	ldd	r25, Z+17	; 0x11
     ba2:	99 23       	and	r25, r25
     ba4:	49 f0       	breq	.+18     	; 0xbb8 <xQueueGenericSend+0x60>
     ba6:	c8 01       	movw	r24, r16
     ba8:	41 96       	adiw	r24, 0x11	; 17
     baa:	0e 94 19 0c 	call	0x1832	; 0x1832 <xTaskRemoveFromEventList>
     bae:	88 23       	and	r24, r24
     bb0:	31 f0       	breq	.+12     	; 0xbbe <xQueueGenericSend+0x66>
     bb2:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <xQueueGenericSend+0x66>
     bb8:	81 11       	cpse	r24, r1
     bba:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	4d c0       	rjmp	.+154    	; 0xc60 <xQueueGenericSend+0x108>
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	9d 81       	ldd	r25, Y+5	; 0x05
     bca:	89 2b       	or	r24, r25
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <xQueueGenericSend+0x7e>
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	45 c0       	rjmp	.+138    	; 0xc60 <xQueueGenericSend+0x108>
     bd6:	d1 10       	cpse	r13, r1
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <xQueueGenericSend+0x8e>
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <vTaskInternalSetTimeOutState>
     be2:	dd 24       	eor	r13, r13
     be4:	d3 94       	inc	r13
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSuspendAll>
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	0f 92       	push	r0
     bf4:	f8 01       	movw	r30, r16
     bf6:	85 8d       	ldd	r24, Z+29	; 0x1d
     bf8:	8f 3f       	cpi	r24, 0xFF	; 255
     bfa:	09 f4       	brne	.+2      	; 0xbfe <xQueueGenericSend+0xa6>
     bfc:	15 8e       	std	Z+29, r1	; 0x1d
     bfe:	f8 01       	movw	r30, r16
     c00:	86 8d       	ldd	r24, Z+30	; 0x1e
     c02:	8f 3f       	cpi	r24, 0xFF	; 255
     c04:	09 f4       	brne	.+2      	; 0xc08 <xQueueGenericSend+0xb0>
     c06:	16 8e       	std	Z+30, r1	; 0x1e
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	be 01       	movw	r22, r28
     c0e:	6c 5f       	subi	r22, 0xFC	; 252
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xTaskCheckForTimeOut>
     c1a:	81 11       	cpse	r24, r1
     c1c:	1b c0       	rjmp	.+54     	; 0xc54 <xQueueGenericSend+0xfc>
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvIsQueueFull>
     c24:	88 23       	and	r24, r24
     c26:	81 f0       	breq	.+32     	; 0xc48 <xQueueGenericSend+0xf0>
     c28:	6c 81       	ldd	r22, Y+4	; 0x04
     c2a:	7d 81       	ldd	r23, Y+5	; 0x05
     c2c:	c8 01       	movw	r24, r16
     c2e:	08 96       	adiw	r24, 0x08	; 8
     c30:	0e 94 07 0c 	call	0x180e	; 0x180e <vTaskPlaceOnEventList>
     c34:	c8 01       	movw	r24, r16
     c36:	0e 94 c4 04 	call	0x988	; 0x988 <prvUnlockQueue>
     c3a:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
     c3e:	81 11       	cpse	r24, r1
     c40:	9e cf       	rjmp	.-196    	; 0xb7e <xQueueGenericSend+0x26>
     c42:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
     c46:	9b cf       	rjmp	.-202    	; 0xb7e <xQueueGenericSend+0x26>
     c48:	c8 01       	movw	r24, r16
     c4a:	0e 94 c4 04 	call	0x988	; 0x988 <prvUnlockQueue>
     c4e:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
     c52:	95 cf       	rjmp	.-214    	; 0xb7e <xQueueGenericSend+0x26>
     c54:	c8 01       	movw	r24, r16
     c56:	0e 94 c4 04 	call	0x988	; 0x988 <prvUnlockQueue>
     c5a:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	08 95       	ret

00000c7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <xQueueReceive+0x12>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <xQueueReceive+0x14>
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	8c 01       	movw	r16, r24
     c98:	6b 01       	movw	r12, r22
     c9a:	5d 83       	std	Y+5, r21	; 0x05
     c9c:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     c9e:	e1 2c       	mov	r14, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     ca6:	f8 01       	movw	r30, r16
     ca8:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     caa:	ff 20       	and	r15, r15
     cac:	a9 f0       	breq	.+42     	; 0xcd8 <xQueueReceive+0x5c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     cae:	b6 01       	movw	r22, r12
     cb0:	c8 01       	movw	r24, r16
     cb2:	0e 94 aa 04 	call	0x954	; 0x954 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
     cb6:	fa 94       	dec	r15
     cb8:	f8 01       	movw	r30, r16
     cba:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     cbc:	80 85       	ldd	r24, Z+8	; 0x08
     cbe:	88 23       	and	r24, r24
     cc0:	39 f0       	breq	.+14     	; 0xcd0 <xQueueReceive+0x54>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     cc2:	c8 01       	movw	r24, r16
     cc4:	08 96       	adiw	r24, 0x08	; 8
     cc6:	0e 94 19 0c 	call	0x1832	; 0x1832 <xTaskRemoveFromEventList>
     cca:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     ccc:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	53 c0       	rjmp	.+166    	; 0xd7e <xQueueReceive+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	89 2b       	or	r24, r25
     cde:	21 f4       	brne	.+8      	; 0xce8 <xQueueReceive+0x6c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	4b c0       	rjmp	.+150    	; 0xd7e <xQueueReceive+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
     ce8:	e1 10       	cpse	r14, r1
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     cf4:	ee 24       	eor	r14, r14
     cf6:	e3 94       	inc	r14
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     cfc:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	0f 92       	push	r0
     d06:	f8 01       	movw	r30, r16
     d08:	85 8d       	ldd	r24, Z+29	; 0x1d
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	09 f4       	brne	.+2      	; 0xd10 <xQueueReceive+0x94>
     d0e:	15 8e       	std	Z+29, r1	; 0x1d
     d10:	f8 01       	movw	r30, r16
     d12:	86 8d       	ldd	r24, Z+30	; 0x1e
     d14:	8f 3f       	cpi	r24, 0xFF	; 255
     d16:	09 f4       	brne	.+2      	; 0xd1a <xQueueReceive+0x9e>
     d18:	16 8e       	std	Z+30, r1	; 0x1e
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     d1e:	be 01       	movw	r22, r28
     d20:	6c 5f       	subi	r22, 0xFC	; 252
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <xTaskCheckForTimeOut>
     d2c:	81 11       	cpse	r24, r1
     d2e:	1b c0       	rjmp	.+54     	; 0xd66 <xQueueReceive+0xea>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d30:	c8 01       	movw	r24, r16
     d32:	0e 94 46 04 	call	0x88c	; 0x88c <prvIsQueueEmpty>
     d36:	88 23       	and	r24, r24
     d38:	81 f0       	breq	.+32     	; 0xd5a <xQueueReceive+0xde>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     d3a:	6c 81       	ldd	r22, Y+4	; 0x04
     d3c:	7d 81       	ldd	r23, Y+5	; 0x05
     d3e:	c8 01       	movw	r24, r16
     d40:	41 96       	adiw	r24, 0x11	; 17
     d42:	0e 94 07 0c 	call	0x180e	; 0x180e <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     d46:	c8 01       	movw	r24, r16
     d48:	0e 94 c4 04 	call	0x988	; 0x988 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     d4c:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
     d50:	81 11       	cpse	r24, r1
     d52:	a6 cf       	rjmp	.-180    	; 0xca0 <xQueueReceive+0x24>
                {
                    taskYIELD_WITHIN_API();
     d54:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
     d58:	a3 cf       	rjmp	.-186    	; 0xca0 <xQueueReceive+0x24>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
     d5a:	c8 01       	movw	r24, r16
     d5c:	0e 94 c4 04 	call	0x988	; 0x988 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     d60:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
     d64:	9d cf       	rjmp	.-198    	; 0xca0 <xQueueReceive+0x24>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 c4 04 	call	0x988	; 0x988 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     d6c:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d70:	c8 01       	movw	r24, r16
     d72:	0e 94 46 04 	call	0x88c	; 0x88c <prvIsQueueEmpty>
     d76:	88 23       	and	r24, r24
     d78:	09 f4       	brne	.+2      	; 0xd7c <xQueueReceive+0x100>
     d7a:	92 cf       	rjmp	.-220    	; 0xca0 <xQueueReceive+0x24>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     d9a:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxDelayedTaskList>
     d9e:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
     da2:	80 81       	ld	r24, Z
     da4:	81 11       	cpse	r24, r1
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <prvResetNextTaskUnblockTime+0x1c>
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <xNextTaskUnblockTime+0x1>
     db0:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <xNextTaskUnblockTime>
     db4:	08 95       	ret
     db6:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxDelayedTaskList>
     dba:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
     dbe:	05 80       	ldd	r0, Z+5	; 0x05
     dc0:	f6 81       	ldd	r31, Z+6	; 0x06
     dc2:	e0 2d       	mov	r30, r0
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <xNextTaskUnblockTime+0x1>
     dcc:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <xNextTaskUnblockTime>
     dd0:	08 95       	ret

00000dd2 <prvInitialiseNewTask>:
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	3c 01       	movw	r6, r24
     dee:	5b 01       	movw	r10, r22
     df0:	49 01       	movw	r8, r18
     df2:	e6 01       	movw	r28, r12
     df4:	c4 2e       	mov	r12, r20
     df6:	d1 2c       	mov	r13, r1
     df8:	a6 01       	movw	r20, r12
     dfa:	65 ea       	ldi	r22, 0xA5	; 165
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	8f 89       	ldd	r24, Y+23	; 0x17
     e00:	98 8d       	ldd	r25, Y+24	; 0x18
     e02:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <memset>
     e06:	4f 89       	ldd	r20, Y+23	; 0x17
     e08:	58 8d       	ldd	r21, Y+24	; 0x18
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	c8 1a       	sub	r12, r24
     e0e:	d1 08       	sbc	r13, r1
     e10:	c4 0e       	add	r12, r20
     e12:	d5 1e       	adc	r13, r21
     e14:	a1 14       	cp	r10, r1
     e16:	b1 04       	cpc	r11, r1
     e18:	89 f4       	brne	.+34     	; 0xe3c <prvInitialiseNewTask+0x6a>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <prvInitialiseNewTask+0x72>
     e1c:	82 2f       	mov	r24, r18
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	f5 01       	movw	r30, r10
     e22:	e8 0f       	add	r30, r24
     e24:	f9 1f       	adc	r31, r25
     e26:	30 81       	ld	r19, Z
     e28:	de 01       	movw	r26, r28
     e2a:	a8 0f       	add	r26, r24
     e2c:	b9 1f       	adc	r27, r25
     e2e:	59 96       	adiw	r26, 0x19	; 25
     e30:	3c 93       	st	X, r19
     e32:	80 81       	ld	r24, Z
     e34:	88 23       	and	r24, r24
     e36:	29 f0       	breq	.+10     	; 0xe42 <prvInitialiseNewTask+0x70>
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <prvInitialiseNewTask+0x6c>
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	2c 30       	cpi	r18, 0x0C	; 12
     e40:	68 f3       	brcs	.-38     	; 0xe1c <prvInitialiseNewTask+0x4a>
     e42:	1c a2       	std	Y+36, r1	; 0x24
     e44:	04 30       	cpi	r16, 0x04	; 4
     e46:	08 f0       	brcs	.+2      	; 0xe4a <prvInitialiseNewTask+0x78>
     e48:	03 e0       	ldi	r16, 0x03	; 3
     e4a:	0e 8b       	std	Y+22, r16	; 0x16
     e4c:	ce 01       	movw	r24, r28
     e4e:	02 96       	adiw	r24, 0x02	; 2
     e50:	0e 94 49 01 	call	0x292	; 0x292 <vListInitialiseItem>
     e54:	ce 01       	movw	r24, r28
     e56:	0c 96       	adiw	r24, 0x0c	; 12
     e58:	0e 94 49 01 	call	0x292	; 0x292 <vListInitialiseItem>
     e5c:	d9 87       	std	Y+9, r29	; 0x09
     e5e:	c8 87       	std	Y+8, r28	; 0x08
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	80 1b       	sub	r24, r16
     e66:	91 09       	sbc	r25, r1
     e68:	9d 87       	std	Y+13, r25	; 0x0d
     e6a:	8c 87       	std	Y+12, r24	; 0x0c
     e6c:	db 8b       	std	Y+19, r29	; 0x13
     e6e:	ca 8b       	std	Y+18, r28	; 0x12
     e70:	a4 01       	movw	r20, r8
     e72:	b3 01       	movw	r22, r6
     e74:	c6 01       	movw	r24, r12
     e76:	0e 94 b2 01 	call	0x364	; 0x364 <pxPortInitialiseStack>
     e7a:	99 83       	std	Y+1, r25	; 0x01
     e7c:	88 83       	st	Y, r24
     e7e:	e1 14       	cp	r14, r1
     e80:	f1 04       	cpc	r15, r1
     e82:	19 f0       	breq	.+6      	; 0xe8a <prvInitialiseNewTask+0xb8>
     e84:	f7 01       	movw	r30, r14
     e86:	d1 83       	std	Z+1, r29	; 0x01
     e88:	c0 83       	st	Z, r28
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	bf 90       	pop	r11
     e9a:	af 90       	pop	r10
     e9c:	9f 90       	pop	r9
     e9e:	8f 90       	pop	r8
     ea0:	7f 90       	pop	r7
     ea2:	6f 90       	pop	r6
     ea4:	08 95       	ret

00000ea6 <prvCreateTask>:
     ea6:	4f 92       	push	r4
     ea8:	5f 92       	push	r5
     eaa:	6f 92       	push	r6
     eac:	7f 92       	push	r7
     eae:	8f 92       	push	r8
     eb0:	9f 92       	push	r9
     eb2:	af 92       	push	r10
     eb4:	bf 92       	push	r11
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	2c 01       	movw	r4, r24
     ec8:	4b 01       	movw	r8, r22
     eca:	14 2f       	mov	r17, r20
     ecc:	39 01       	movw	r6, r18
     ece:	84 2f       	mov	r24, r20
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <pvPortMalloc>
     ed6:	6c 01       	movw	r12, r24
     ed8:	89 2b       	or	r24, r25
     eda:	99 f0       	breq	.+38     	; 0xf02 <prvCreateTask+0x5c>
     edc:	8a e2       	ldi	r24, 0x2A	; 42
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <pvPortMalloc>
     ee4:	ec 01       	movw	r28, r24
     ee6:	89 2b       	or	r24, r25
     ee8:	41 f0       	breq	.+16     	; 0xefa <prvCreateTask+0x54>
     eea:	8a e2       	ldi	r24, 0x2A	; 42
     eec:	fe 01       	movw	r30, r28
     eee:	11 92       	st	Z+, r1
     ef0:	8a 95       	dec	r24
     ef2:	e9 f7       	brne	.-6      	; 0xeee <prvCreateTask+0x48>
     ef4:	d8 8e       	std	Y+24, r13	; 0x18
     ef6:	cf 8a       	std	Y+23, r12	; 0x17
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <prvCreateTask+0x60>
     efa:	c6 01       	movw	r24, r12
     efc:	0e 94 12 04 	call	0x824	; 0x824 <vPortFree>
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <prvCreateTask+0x60>
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	d0 e0       	ldi	r29, 0x00	; 0
     f06:	20 97       	sbiw	r28, 0x00	; 0
     f08:	49 f0       	breq	.+18     	; 0xf1c <prvCreateTask+0x76>
     f0a:	a1 2c       	mov	r10, r1
     f0c:	b1 2c       	mov	r11, r1
     f0e:	6e 01       	movw	r12, r28
     f10:	93 01       	movw	r18, r6
     f12:	41 2f       	mov	r20, r17
     f14:	b4 01       	movw	r22, r8
     f16:	c2 01       	movw	r24, r4
     f18:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <prvInitialiseNewTask>
     f1c:	ce 01       	movw	r24, r28
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	9f 90       	pop	r9
     f34:	8f 90       	pop	r8
     f36:	7f 90       	pop	r7
     f38:	6f 90       	pop	r6
     f3a:	5f 90       	pop	r5
     f3c:	4f 90       	pop	r4
     f3e:	08 95       	ret

00000f40 <prvIdleTask>:
     f40:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <pxReadyTasksLists>
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	e0 f3       	brcs	.-8      	; 0xf40 <prvIdleTask>
     f48:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
     f4c:	f9 cf       	rjmp	.-14     	; 0xf40 <prvIdleTask>

00000f4e <prvInitialiseTaskLists>:
     f4e:	cf 93       	push	r28
     f50:	c0 e0       	ldi	r28, 0x00	; 0
     f52:	10 c0       	rjmp	.+32     	; 0xf74 <prvInitialiseTaskLists+0x26>
     f54:	8c 2f       	mov	r24, r28
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9c 01       	movw	r18, r24
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	81 5a       	subi	r24, 0xA1	; 161
     f6c:	9a 4f       	sbci	r25, 0xFA	; 250
     f6e:	0e 94 3b 01 	call	0x276	; 0x276 <vListInitialise>
     f72:	cf 5f       	subi	r28, 0xFF	; 255
     f74:	c4 30       	cpi	r28, 0x04	; 4
     f76:	70 f3       	brcs	.-36     	; 0xf54 <prvInitialiseTaskLists+0x6>
     f78:	86 e5       	ldi	r24, 0x56	; 86
     f7a:	95 e0       	ldi	r25, 0x05	; 5
     f7c:	0e 94 3b 01 	call	0x276	; 0x276 <vListInitialise>
     f80:	8d e4       	ldi	r24, 0x4D	; 77
     f82:	95 e0       	ldi	r25, 0x05	; 5
     f84:	0e 94 3b 01 	call	0x276	; 0x276 <vListInitialise>
     f88:	80 e4       	ldi	r24, 0x40	; 64
     f8a:	95 e0       	ldi	r25, 0x05	; 5
     f8c:	0e 94 3b 01 	call	0x276	; 0x276 <vListInitialise>
     f90:	86 e5       	ldi	r24, 0x56	; 86
     f92:	95 e0       	ldi	r25, 0x05	; 5
     f94:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <pxDelayedTaskList+0x1>
     f98:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <pxDelayedTaskList>
     f9c:	8d e4       	ldi	r24, 0x4D	; 77
     f9e:	95 e0       	ldi	r25, 0x05	; 5
     fa0:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pxOverflowDelayedTaskList+0x1>
     fa4:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pxOverflowDelayedTaskList>
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <prvAddNewTaskToReadyList>:
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	ec 01       	movw	r28, r24
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
     fb8:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <uxCurrentNumberOfTasks>
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <uxCurrentNumberOfTasks>
     fc2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pxCurrentTCB>
     fc6:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     fca:	89 2b       	or	r24, r25
     fcc:	59 f4       	brne	.+22     	; 0xfe4 <prvAddNewTaskToReadyList+0x38>
     fce:	d0 93 84 05 	sts	0x0584, r29	; 0x800584 <pxCurrentTCB+0x1>
     fd2:	c0 93 83 05 	sts	0x0583, r28	; 0x800583 <pxCurrentTCB>
     fd6:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <uxCurrentNumberOfTasks>
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	99 f4       	brne	.+38     	; 0x1004 <prvAddNewTaskToReadyList+0x58>
     fde:	0e 94 a7 07 	call	0xf4e	; 0xf4e <prvInitialiseTaskLists>
     fe2:	10 c0       	rjmp	.+32     	; 0x1004 <prvAddNewTaskToReadyList+0x58>
     fe4:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <xSchedulerRunning>
     fe8:	81 11       	cpse	r24, r1
     fea:	0c c0       	rjmp	.+24     	; 0x1004 <prvAddNewTaskToReadyList+0x58>
     fec:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
     ff0:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
     ff4:	96 89       	ldd	r25, Z+22	; 0x16
     ff6:	8e 89       	ldd	r24, Y+22	; 0x16
     ff8:	89 17       	cp	r24, r25
     ffa:	20 f0       	brcs	.+8      	; 0x1004 <prvAddNewTaskToReadyList+0x58>
     ffc:	d0 93 84 05 	sts	0x0584, r29	; 0x800584 <pxCurrentTCB+0x1>
    1000:	c0 93 83 05 	sts	0x0583, r28	; 0x800583 <pxCurrentTCB>
    1004:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <uxTaskNumber>
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <uxTaskNumber>
    100e:	8e 89       	ldd	r24, Y+22	; 0x16
    1010:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <uxTopReadyPriority>
    1014:	98 17       	cp	r25, r24
    1016:	10 f4       	brcc	.+4      	; 0x101c <prvAddNewTaskToReadyList+0x70>
    1018:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <uxTopReadyPriority>
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fc 01       	movw	r30, r24
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	8e 0f       	add	r24, r30
    102e:	9f 1f       	adc	r25, r31
    1030:	fc 01       	movw	r30, r24
    1032:	e1 5a       	subi	r30, 0xA1	; 161
    1034:	fa 4f       	sbci	r31, 0xFA	; 250
    1036:	01 80       	ldd	r0, Z+1	; 0x01
    1038:	f2 81       	ldd	r31, Z+2	; 0x02
    103a:	e0 2d       	mov	r30, r0
    103c:	fd 83       	std	Y+5, r31	; 0x05
    103e:	ec 83       	std	Y+4, r30	; 0x04
    1040:	84 81       	ldd	r24, Z+4	; 0x04
    1042:	95 81       	ldd	r25, Z+5	; 0x05
    1044:	9f 83       	std	Y+7, r25	; 0x07
    1046:	8e 83       	std	Y+6, r24	; 0x06
    1048:	a4 81       	ldd	r26, Z+4	; 0x04
    104a:	b5 81       	ldd	r27, Z+5	; 0x05
    104c:	ce 01       	movw	r24, r28
    104e:	02 96       	adiw	r24, 0x02	; 2
    1050:	13 96       	adiw	r26, 0x03	; 3
    1052:	9c 93       	st	X, r25
    1054:	8e 93       	st	-X, r24
    1056:	12 97       	sbiw	r26, 0x02	; 2
    1058:	95 83       	std	Z+5, r25	; 0x05
    105a:	84 83       	std	Z+4, r24	; 0x04
    105c:	ee 89       	ldd	r30, Y+22	; 0x16
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	cf 01       	movw	r24, r30
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	e8 0f       	add	r30, r24
    1070:	f9 1f       	adc	r31, r25
    1072:	e1 5a       	subi	r30, 0xA1	; 161
    1074:	fa 4f       	sbci	r31, 0xFA	; 250
    1076:	fb 87       	std	Y+11, r31	; 0x0b
    1078:	ea 87       	std	Y+10, r30	; 0x0a
    107a:	80 81       	ld	r24, Z
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 83       	st	Z, r24
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <xSchedulerRunning>
    1088:	88 23       	and	r24, r24
    108a:	51 f0       	breq	.+20     	; 0x10a0 <prvAddNewTaskToReadyList+0xf4>
    108c:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
    1090:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    1094:	96 89       	ldd	r25, Z+22	; 0x16
    1096:	8e 89       	ldd	r24, Y+22	; 0x16
    1098:	98 17       	cp	r25, r24
    109a:	10 f4       	brcc	.+4      	; 0x10a0 <prvAddNewTaskToReadyList+0xf4>
    109c:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <prvAddCurrentTaskToDelayedList>:
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
    10b8:	00 91 3d 05 	lds	r16, 0x053D	; 0x80053d <xTickCount>
    10bc:	10 91 3e 05 	lds	r17, 0x053E	; 0x80053e <xTickCount+0x1>
    10c0:	e0 90 4b 05 	lds	r14, 0x054B	; 0x80054b <pxDelayedTaskList>
    10c4:	f0 90 4c 05 	lds	r15, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    10c8:	c0 90 49 05 	lds	r12, 0x0549	; 0x800549 <pxOverflowDelayedTaskList>
    10cc:	d0 90 4a 05 	lds	r13, 0x054A	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    10d0:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pxCurrentTCB>
    10d4:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    10d8:	02 96       	adiw	r24, 0x02	; 2
    10da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <uxListRemove>
    10de:	c0 0f       	add	r28, r16
    10e0:	d1 1f       	adc	r29, r17
    10e2:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
    10e6:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    10ea:	d3 83       	std	Z+3, r29	; 0x03
    10ec:	c2 83       	std	Z+2, r28	; 0x02
    10ee:	c0 17       	cp	r28, r16
    10f0:	d1 07       	cpc	r29, r17
    10f2:	50 f4       	brcc	.+20     	; 0x1108 <prvAddCurrentTaskToDelayedList+0x62>
    10f4:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <pxCurrentTCB>
    10f8:	70 91 84 05 	lds	r23, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    10fc:	6e 5f       	subi	r22, 0xFE	; 254
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	c6 01       	movw	r24, r12
    1102:	0e 94 4d 01 	call	0x29a	; 0x29a <vListInsert>
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <prvAddCurrentTaskToDelayedList+0x8a>
    1108:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <pxCurrentTCB>
    110c:	70 91 84 05 	lds	r23, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    1110:	6e 5f       	subi	r22, 0xFE	; 254
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	c7 01       	movw	r24, r14
    1116:	0e 94 4d 01 	call	0x29a	; 0x29a <vListInsert>
    111a:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <xNextTaskUnblockTime>
    111e:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <xNextTaskUnblockTime+0x1>
    1122:	c8 17       	cp	r28, r24
    1124:	d9 07       	cpc	r29, r25
    1126:	20 f4       	brcc	.+8      	; 0x1130 <prvAddCurrentTaskToDelayedList+0x8a>
    1128:	d0 93 35 05 	sts	0x0535, r29	; 0x800535 <xNextTaskUnblockTime+0x1>
    112c:	c0 93 34 05 	sts	0x0534, r28	; 0x800534 <xNextTaskUnblockTime>
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	08 95       	ret

00001142 <xTaskCreate>:
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	0e 94 53 07 	call	0xea6	; 0xea6 <prvCreateTask>
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	21 f0       	breq	.+8      	; 0x1158 <xTaskCreate+0x16>
    1150:	0e 94 d6 07 	call	0xfac	; 0xfac <prvAddNewTaskToReadyList>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	01 c0       	rjmp	.+2      	; 0x115a <xTaskCreate+0x18>
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	08 95       	ret

00001162 <prvCreateIdleTasks>:
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	2c 97       	sbiw	r28, 0x0c	; 12
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	12 c0       	rjmp	.+36     	; 0x11a6 <prvCreateIdleTasks+0x44>
    1182:	82 2f       	mov	r24, r18
    1184:	02 2e       	mov	r0, r18
    1186:	00 0c       	add	r0, r0
    1188:	99 0b       	sbc	r25, r25
    118a:	fc 01       	movw	r30, r24
    118c:	ef 5f       	subi	r30, 0xFF	; 255
    118e:	fe 4f       	sbci	r31, 0xFE	; 254
    1190:	30 81       	ld	r19, Z
    1192:	e1 e0       	ldi	r30, 0x01	; 1
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	ec 0f       	add	r30, r28
    1198:	fd 1f       	adc	r31, r29
    119a:	e8 0f       	add	r30, r24
    119c:	f9 1f       	adc	r31, r25
    119e:	30 83       	st	Z, r19
    11a0:	33 23       	and	r19, r19
    11a2:	19 f0       	breq	.+6      	; 0x11aa <prvCreateIdleTasks+0x48>
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	2c 30       	cpi	r18, 0x0C	; 12
    11a8:	64 f3       	brlt	.-40     	; 0x1182 <prvCreateIdleTasks+0x20>
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	15 c0       	rjmp	.+42     	; 0x11da <prvCreateIdleTasks+0x78>
    11b0:	81 2f       	mov	r24, r17
    11b2:	88 0f       	add	r24, r24
    11b4:	99 0b       	sbc	r25, r25
    11b6:	9c 01       	movw	r18, r24
    11b8:	2e 5c       	subi	r18, 0xCE	; 206
    11ba:	3a 4f       	sbci	r19, 0xFA	; 250
    11bc:	79 01       	movw	r14, r18
    11be:	00 e0       	ldi	r16, 0x00	; 0
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e8       	ldi	r20, 0x80	; 128
    11c6:	be 01       	movw	r22, r28
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	80 ea       	ldi	r24, 0xA0	; 160
    11ce:	97 e0       	ldi	r25, 0x07	; 7
    11d0:	0e 94 a1 08 	call	0x1142	; 0x1142 <xTaskCreate>
    11d4:	88 23       	and	r24, r24
    11d6:	19 f0       	breq	.+6      	; 0x11de <prvCreateIdleTasks+0x7c>
    11d8:	1f 5f       	subi	r17, 0xFF	; 255
    11da:	11 16       	cp	r1, r17
    11dc:	4c f7       	brge	.-46     	; 0x11b0 <prvCreateIdleTasks+0x4e>
    11de:	2c 96       	adiw	r28, 0x0c	; 12
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <vTaskStartScheduler>:
    11f8:	0e 94 b1 08 	call	0x1162	; 0x1162 <prvCreateIdleTasks>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	81 f4       	brne	.+32     	; 0x1220 <vTaskStartScheduler+0x28>
    1200:	f8 94       	cli
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	9f ef       	ldi	r25, 0xFF	; 255
    1206:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <xNextTaskUnblockTime+0x1>
    120a:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <xNextTaskUnblockTime>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <xSchedulerRunning>
    1214:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <xTickCount+0x1>
    1218:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <xTickCount>
    121c:	0e 94 1e 02 	call	0x43c	; 0x43c <xPortStartScheduler>
    1220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1224:	08 95       	ret

00001226 <vTaskSuspendAll>:
    1226:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <uxSchedulerSuspended>
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <uxSchedulerSuspended>
    1230:	08 95       	ret

00001232 <xTaskGetTickCount>:
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	0f 92       	push	r0
    1238:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <xTickCount>
    123c:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <xTickCount+0x1>
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	08 95       	ret

00001246 <xTaskIncrementTick>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <uxSchedulerSuspended>
    1252:	81 11       	cpse	r24, r1
    1254:	01 c1       	rjmp	.+514    	; 0x1458 <xTaskIncrementTick+0x212>
    1256:	c0 91 3d 05 	lds	r28, 0x053D	; 0x80053d <xTickCount>
    125a:	d0 91 3e 05 	lds	r29, 0x053E	; 0x80053e <xTickCount+0x1>
    125e:	8e 01       	movw	r16, r28
    1260:	0f 5f       	subi	r16, 0xFF	; 255
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	10 93 3e 05 	sts	0x053E, r17	; 0x80053e <xTickCount+0x1>
    1268:	00 93 3d 05 	sts	0x053D, r16	; 0x80053d <xTickCount>
    126c:	01 15       	cp	r16, r1
    126e:	11 05       	cpc	r17, r1
    1270:	b9 f4       	brne	.+46     	; 0x12a0 <xTaskIncrementTick+0x5a>
    1272:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxDelayedTaskList>
    1276:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    127a:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <pxOverflowDelayedTaskList>
    127e:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    1282:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <pxDelayedTaskList+0x1>
    1286:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <pxDelayedTaskList>
    128a:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pxOverflowDelayedTaskList+0x1>
    128e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pxOverflowDelayedTaskList>
    1292:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <xNumOfOverflows>
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <xNumOfOverflows>
    129c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <prvResetNextTaskUnblockTime>
    12a0:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <xNextTaskUnblockTime>
    12a4:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <xNextTaskUnblockTime+0x1>
    12a8:	08 17       	cp	r16, r24
    12aa:	19 07       	cpc	r17, r25
    12ac:	20 f4       	brcc	.+8      	; 0x12b6 <xTaskIncrementTick+0x70>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	b8 c0       	rjmp	.+368    	; 0x1422 <xTaskIncrementTick+0x1dc>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <xTaskIncrementTick+0x72>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxDelayedTaskList>
    12bc:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    12c0:	90 81       	ld	r25, Z
    12c2:	91 11       	cpse	r25, r1
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <xTaskIncrementTick+0x8e>
    12c6:	2f ef       	ldi	r18, 0xFF	; 255
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	30 93 35 05 	sts	0x0535, r19	; 0x800535 <xNextTaskUnblockTime+0x1>
    12ce:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <xNextTaskUnblockTime>
    12d2:	a7 c0       	rjmp	.+334    	; 0x1422 <xTaskIncrementTick+0x1dc>
    12d4:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxDelayedTaskList>
    12d8:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxDelayedTaskList+0x1>
    12dc:	05 80       	ldd	r0, Z+5	; 0x05
    12de:	f6 81       	ldd	r31, Z+6	; 0x06
    12e0:	e0 2d       	mov	r30, r0
    12e2:	06 80       	ldd	r0, Z+6	; 0x06
    12e4:	f7 81       	ldd	r31, Z+7	; 0x07
    12e6:	e0 2d       	mov	r30, r0
    12e8:	22 81       	ldd	r18, Z+2	; 0x02
    12ea:	33 81       	ldd	r19, Z+3	; 0x03
    12ec:	02 17       	cp	r16, r18
    12ee:	13 07       	cpc	r17, r19
    12f0:	28 f4       	brcc	.+10     	; 0x12fc <xTaskIncrementTick+0xb6>
    12f2:	30 93 35 05 	sts	0x0535, r19	; 0x800535 <xNextTaskUnblockTime+0x1>
    12f6:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <xNextTaskUnblockTime>
    12fa:	93 c0       	rjmp	.+294    	; 0x1422 <xTaskIncrementTick+0x1dc>
    12fc:	a2 85       	ldd	r26, Z+10	; 0x0a
    12fe:	b3 85       	ldd	r27, Z+11	; 0x0b
    1300:	24 81       	ldd	r18, Z+4	; 0x04
    1302:	35 81       	ldd	r19, Z+5	; 0x05
    1304:	46 81       	ldd	r20, Z+6	; 0x06
    1306:	57 81       	ldd	r21, Z+7	; 0x07
    1308:	e9 01       	movw	r28, r18
    130a:	5d 83       	std	Y+5, r21	; 0x05
    130c:	4c 83       	std	Y+4, r20	; 0x04
    130e:	26 81       	ldd	r18, Z+6	; 0x06
    1310:	37 81       	ldd	r19, Z+7	; 0x07
    1312:	44 81       	ldd	r20, Z+4	; 0x04
    1314:	55 81       	ldd	r21, Z+5	; 0x05
    1316:	e9 01       	movw	r28, r18
    1318:	5b 83       	std	Y+3, r21	; 0x03
    131a:	4a 83       	std	Y+2, r20	; 0x02
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	2d 91       	ld	r18, X+
    1320:	3c 91       	ld	r19, X
    1322:	12 97       	sbiw	r26, 0x02	; 2
    1324:	af 01       	movw	r20, r30
    1326:	4e 5f       	subi	r20, 0xFE	; 254
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	24 17       	cp	r18, r20
    132c:	35 07       	cpc	r19, r21
    132e:	31 f4       	brne	.+12     	; 0x133c <xTaskIncrementTick+0xf6>
    1330:	26 81       	ldd	r18, Z+6	; 0x06
    1332:	37 81       	ldd	r19, Z+7	; 0x07
    1334:	12 96       	adiw	r26, 0x02	; 2
    1336:	3c 93       	st	X, r19
    1338:	2e 93       	st	-X, r18
    133a:	11 97       	sbiw	r26, 0x01	; 1
    133c:	13 86       	std	Z+11, r1	; 0x0b
    133e:	12 86       	std	Z+10, r1	; 0x0a
    1340:	9c 91       	ld	r25, X
    1342:	91 50       	subi	r25, 0x01	; 1
    1344:	9c 93       	st	X, r25
    1346:	a4 89       	ldd	r26, Z+20	; 0x14
    1348:	b5 89       	ldd	r27, Z+21	; 0x15
    134a:	10 97       	sbiw	r26, 0x00	; 0
    134c:	19 f1       	breq	.+70     	; 0x1394 <xTaskIncrementTick+0x14e>
    134e:	26 85       	ldd	r18, Z+14	; 0x0e
    1350:	37 85       	ldd	r19, Z+15	; 0x0f
    1352:	60 89       	ldd	r22, Z+16	; 0x10
    1354:	71 89       	ldd	r23, Z+17	; 0x11
    1356:	e9 01       	movw	r28, r18
    1358:	7d 83       	std	Y+5, r23	; 0x05
    135a:	6c 83       	std	Y+4, r22	; 0x04
    135c:	20 89       	ldd	r18, Z+16	; 0x10
    135e:	31 89       	ldd	r19, Z+17	; 0x11
    1360:	66 85       	ldd	r22, Z+14	; 0x0e
    1362:	77 85       	ldd	r23, Z+15	; 0x0f
    1364:	e9 01       	movw	r28, r18
    1366:	7b 83       	std	Y+3, r23	; 0x03
    1368:	6a 83       	std	Y+2, r22	; 0x02
    136a:	11 96       	adiw	r26, 0x01	; 1
    136c:	6d 91       	ld	r22, X+
    136e:	7c 91       	ld	r23, X
    1370:	12 97       	sbiw	r26, 0x02	; 2
    1372:	9f 01       	movw	r18, r30
    1374:	24 5f       	subi	r18, 0xF4	; 244
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	62 17       	cp	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	31 f4       	brne	.+12     	; 0x138a <xTaskIncrementTick+0x144>
    137e:	20 89       	ldd	r18, Z+16	; 0x10
    1380:	31 89       	ldd	r19, Z+17	; 0x11
    1382:	12 96       	adiw	r26, 0x02	; 2
    1384:	3c 93       	st	X, r19
    1386:	2e 93       	st	-X, r18
    1388:	11 97       	sbiw	r26, 0x01	; 1
    138a:	15 8a       	std	Z+21, r1	; 0x15
    138c:	14 8a       	std	Z+20, r1	; 0x14
    138e:	9c 91       	ld	r25, X
    1390:	91 50       	subi	r25, 0x01	; 1
    1392:	9c 93       	st	X, r25
    1394:	26 89       	ldd	r18, Z+22	; 0x16
    1396:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <uxTopReadyPriority>
    139a:	92 17       	cp	r25, r18
    139c:	10 f4       	brcc	.+4      	; 0x13a2 <xTaskIncrementTick+0x15c>
    139e:	20 93 3c 05 	sts	0x053C, r18	; 0x80053c <uxTopReadyPriority>
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	d9 01       	movw	r26, r18
    13a6:	aa 0f       	add	r26, r26
    13a8:	bb 1f       	adc	r27, r27
    13aa:	aa 0f       	add	r26, r26
    13ac:	bb 1f       	adc	r27, r27
    13ae:	aa 0f       	add	r26, r26
    13b0:	bb 1f       	adc	r27, r27
    13b2:	2a 0f       	add	r18, r26
    13b4:	3b 1f       	adc	r19, r27
    13b6:	d9 01       	movw	r26, r18
    13b8:	a1 5a       	subi	r26, 0xA1	; 161
    13ba:	ba 4f       	sbci	r27, 0xFA	; 250
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	0d 90       	ld	r0, X+
    13c0:	bc 91       	ld	r27, X
    13c2:	a0 2d       	mov	r26, r0
    13c4:	b5 83       	std	Z+5, r27	; 0x05
    13c6:	a4 83       	std	Z+4, r26	; 0x04
    13c8:	14 96       	adiw	r26, 0x04	; 4
    13ca:	2d 91       	ld	r18, X+
    13cc:	3c 91       	ld	r19, X
    13ce:	15 97       	sbiw	r26, 0x05	; 5
    13d0:	37 83       	std	Z+7, r19	; 0x07
    13d2:	26 83       	std	Z+6, r18	; 0x06
    13d4:	14 96       	adiw	r26, 0x04	; 4
    13d6:	2d 91       	ld	r18, X+
    13d8:	3c 91       	ld	r19, X
    13da:	15 97       	sbiw	r26, 0x05	; 5
    13dc:	e9 01       	movw	r28, r18
    13de:	5b 83       	std	Y+3, r21	; 0x03
    13e0:	4a 83       	std	Y+2, r20	; 0x02
    13e2:	15 96       	adiw	r26, 0x05	; 5
    13e4:	5c 93       	st	X, r21
    13e6:	4e 93       	st	-X, r20
    13e8:	14 97       	sbiw	r26, 0x04	; 4
    13ea:	a6 89       	ldd	r26, Z+22	; 0x16
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	9d 01       	movw	r18, r26
    13f0:	22 0f       	add	r18, r18
    13f2:	33 1f       	adc	r19, r19
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	a2 0f       	add	r26, r18
    13fe:	b3 1f       	adc	r27, r19
    1400:	a1 5a       	subi	r26, 0xA1	; 161
    1402:	ba 4f       	sbci	r27, 0xFA	; 250
    1404:	b3 87       	std	Z+11, r27	; 0x0b
    1406:	a2 87       	std	Z+10, r26	; 0x0a
    1408:	9c 91       	ld	r25, X
    140a:	9f 5f       	subi	r25, 0xFF	; 255
    140c:	9c 93       	st	X, r25
    140e:	26 89       	ldd	r18, Z+22	; 0x16
    1410:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
    1414:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    1418:	96 89       	ldd	r25, Z+22	; 0x16
    141a:	92 17       	cp	r25, r18
    141c:	08 f4       	brcc	.+2      	; 0x1420 <xTaskIncrementTick+0x1da>
    141e:	49 cf       	rjmp	.-366    	; 0x12b2 <xTaskIncrementTick+0x6c>
    1420:	4b cf       	rjmp	.-362    	; 0x12b8 <xTaskIncrementTick+0x72>
    1422:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
    1426:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    142a:	26 89       	ldd	r18, Z+22	; 0x16
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	f9 01       	movw	r30, r18
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	2e 0f       	add	r18, r30
    143e:	3f 1f       	adc	r19, r31
    1440:	f9 01       	movw	r30, r18
    1442:	e1 5a       	subi	r30, 0xA1	; 161
    1444:	fa 4f       	sbci	r31, 0xFA	; 250
    1446:	90 81       	ld	r25, Z
    1448:	92 30       	cpi	r25, 0x02	; 2
    144a:	08 f0       	brcs	.+2      	; 0x144e <xTaskIncrementTick+0x208>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <xYieldPendings>
    1452:	91 11       	cpse	r25, r1
    1454:	0c c0       	rjmp	.+24     	; 0x146e <xTaskIncrementTick+0x228>
    1456:	0c c0       	rjmp	.+24     	; 0x1470 <xTaskIncrementTick+0x22a>
    1458:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <xPendedTicks>
    145c:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <xPendedTicks+0x1>
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <xPendedTicks+0x1>
    1466:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <xPendedTicks>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <xTaskIncrementTick+0x22a>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <xTaskResumeAll>:
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	0f 92       	push	r0
    1484:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <uxSchedulerSuspended>
    1488:	81 50       	subi	r24, 0x01	; 1
    148a:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <uxSchedulerSuspended>
    148e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <uxSchedulerSuspended>
    1492:	81 11       	cpse	r24, r1
    1494:	c3 c0       	rjmp	.+390    	; 0x161c <xTaskResumeAll+0x1a2>
    1496:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <uxCurrentNumberOfTasks>
    149a:	81 11       	cpse	r24, r1
    149c:	96 c0       	rjmp	.+300    	; 0x15ca <xTaskResumeAll+0x150>
    149e:	c1 c0       	rjmp	.+386    	; 0x1622 <xTaskResumeAll+0x1a8>
    14a0:	e0 91 45 05 	lds	r30, 0x0545	; 0x800545 <xPendingReadyList+0x5>
    14a4:	f0 91 46 05 	lds	r31, 0x0546	; 0x800546 <xPendingReadyList+0x6>
    14a8:	06 80       	ldd	r0, Z+6	; 0x06
    14aa:	f7 81       	ldd	r31, Z+7	; 0x07
    14ac:	e0 2d       	mov	r30, r0
    14ae:	a4 89       	ldd	r26, Z+20	; 0x14
    14b0:	b5 89       	ldd	r27, Z+21	; 0x15
    14b2:	c6 85       	ldd	r28, Z+14	; 0x0e
    14b4:	d7 85       	ldd	r29, Z+15	; 0x0f
    14b6:	80 89       	ldd	r24, Z+16	; 0x10
    14b8:	91 89       	ldd	r25, Z+17	; 0x11
    14ba:	9d 83       	std	Y+5, r25	; 0x05
    14bc:	8c 83       	std	Y+4, r24	; 0x04
    14be:	c0 89       	ldd	r28, Z+16	; 0x10
    14c0:	d1 89       	ldd	r29, Z+17	; 0x11
    14c2:	86 85       	ldd	r24, Z+14	; 0x0e
    14c4:	97 85       	ldd	r25, Z+15	; 0x0f
    14c6:	9b 83       	std	Y+3, r25	; 0x03
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	2d 91       	ld	r18, X+
    14ce:	3c 91       	ld	r19, X
    14d0:	12 97       	sbiw	r26, 0x02	; 2
    14d2:	cf 01       	movw	r24, r30
    14d4:	0c 96       	adiw	r24, 0x0c	; 12
    14d6:	28 17       	cp	r18, r24
    14d8:	39 07       	cpc	r19, r25
    14da:	31 f4       	brne	.+12     	; 0x14e8 <xTaskResumeAll+0x6e>
    14dc:	80 89       	ldd	r24, Z+16	; 0x10
    14de:	91 89       	ldd	r25, Z+17	; 0x11
    14e0:	12 96       	adiw	r26, 0x02	; 2
    14e2:	9c 93       	st	X, r25
    14e4:	8e 93       	st	-X, r24
    14e6:	11 97       	sbiw	r26, 0x01	; 1
    14e8:	15 8a       	std	Z+21, r1	; 0x15
    14ea:	14 8a       	std	Z+20, r1	; 0x14
    14ec:	8c 91       	ld	r24, X
    14ee:	81 50       	subi	r24, 0x01	; 1
    14f0:	8c 93       	st	X, r24
    14f2:	a2 85       	ldd	r26, Z+10	; 0x0a
    14f4:	b3 85       	ldd	r27, Z+11	; 0x0b
    14f6:	c4 81       	ldd	r28, Z+4	; 0x04
    14f8:	d5 81       	ldd	r29, Z+5	; 0x05
    14fa:	86 81       	ldd	r24, Z+6	; 0x06
    14fc:	97 81       	ldd	r25, Z+7	; 0x07
    14fe:	9d 83       	std	Y+5, r25	; 0x05
    1500:	8c 83       	std	Y+4, r24	; 0x04
    1502:	c6 81       	ldd	r28, Z+6	; 0x06
    1504:	d7 81       	ldd	r29, Z+7	; 0x07
    1506:	84 81       	ldd	r24, Z+4	; 0x04
    1508:	95 81       	ldd	r25, Z+5	; 0x05
    150a:	9b 83       	std	Y+3, r25	; 0x03
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	8d 91       	ld	r24, X+
    1512:	9c 91       	ld	r25, X
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	9f 01       	movw	r18, r30
    1518:	2e 5f       	subi	r18, 0xFE	; 254
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	82 17       	cp	r24, r18
    151e:	93 07       	cpc	r25, r19
    1520:	31 f4       	brne	.+12     	; 0x152e <xTaskResumeAll+0xb4>
    1522:	86 81       	ldd	r24, Z+6	; 0x06
    1524:	97 81       	ldd	r25, Z+7	; 0x07
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	9c 93       	st	X, r25
    152a:	8e 93       	st	-X, r24
    152c:	11 97       	sbiw	r26, 0x01	; 1
    152e:	13 86       	std	Z+11, r1	; 0x0b
    1530:	12 86       	std	Z+10, r1	; 0x0a
    1532:	8c 91       	ld	r24, X
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	8c 93       	st	X, r24
    1538:	86 89       	ldd	r24, Z+22	; 0x16
    153a:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <uxTopReadyPriority>
    153e:	98 17       	cp	r25, r24
    1540:	10 f4       	brcc	.+4      	; 0x1546 <xTaskResumeAll+0xcc>
    1542:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <uxTopReadyPriority>
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	dc 01       	movw	r26, r24
    154a:	aa 0f       	add	r26, r26
    154c:	bb 1f       	adc	r27, r27
    154e:	aa 0f       	add	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	aa 0f       	add	r26, r26
    1554:	bb 1f       	adc	r27, r27
    1556:	8a 0f       	add	r24, r26
    1558:	9b 1f       	adc	r25, r27
    155a:	dc 01       	movw	r26, r24
    155c:	a1 5a       	subi	r26, 0xA1	; 161
    155e:	ba 4f       	sbci	r27, 0xFA	; 250
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	0d 90       	ld	r0, X+
    1564:	bc 91       	ld	r27, X
    1566:	a0 2d       	mov	r26, r0
    1568:	b5 83       	std	Z+5, r27	; 0x05
    156a:	a4 83       	std	Z+4, r26	; 0x04
    156c:	14 96       	adiw	r26, 0x04	; 4
    156e:	8d 91       	ld	r24, X+
    1570:	9c 91       	ld	r25, X
    1572:	15 97       	sbiw	r26, 0x05	; 5
    1574:	97 83       	std	Z+7, r25	; 0x07
    1576:	86 83       	std	Z+6, r24	; 0x06
    1578:	14 96       	adiw	r26, 0x04	; 4
    157a:	cd 91       	ld	r28, X+
    157c:	dc 91       	ld	r29, X
    157e:	15 97       	sbiw	r26, 0x05	; 5
    1580:	3b 83       	std	Y+3, r19	; 0x03
    1582:	2a 83       	std	Y+2, r18	; 0x02
    1584:	15 96       	adiw	r26, 0x05	; 5
    1586:	3c 93       	st	X, r19
    1588:	2e 93       	st	-X, r18
    158a:	14 97       	sbiw	r26, 0x04	; 4
    158c:	a6 89       	ldd	r26, Z+22	; 0x16
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	cd 01       	movw	r24, r26
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	a8 0f       	add	r26, r24
    15a0:	b9 1f       	adc	r27, r25
    15a2:	a1 5a       	subi	r26, 0xA1	; 161
    15a4:	ba 4f       	sbci	r27, 0xFA	; 250
    15a6:	b3 87       	std	Z+11, r27	; 0x0b
    15a8:	a2 87       	std	Z+10, r26	; 0x0a
    15aa:	8c 91       	ld	r24, X
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	8c 93       	st	X, r24
    15b0:	96 89       	ldd	r25, Z+22	; 0x16
    15b2:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <pxCurrentTCB>
    15b6:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    15ba:	56 96       	adiw	r26, 0x16	; 22
    15bc:	8c 91       	ld	r24, X
    15be:	89 17       	cp	r24, r25
    15c0:	30 f4       	brcc	.+12     	; 0x15ce <xTaskResumeAll+0x154>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <xYieldPendings>
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <xTaskResumeAll+0x154>
    15ca:	e0 e0       	ldi	r30, 0x00	; 0
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <xPendingReadyList>
    15d2:	81 11       	cpse	r24, r1
    15d4:	65 cf       	rjmp	.-310    	; 0x14a0 <xTaskResumeAll+0x26>
    15d6:	ef 2b       	or	r30, r31
    15d8:	11 f0       	breq	.+4      	; 0x15de <xTaskResumeAll+0x164>
    15da:	0e 94 cd 06 	call	0xd9a	; 0xd9a <prvResetNextTaskUnblockTime>
    15de:	c0 91 39 05 	lds	r28, 0x0539	; 0x800539 <xPendedTicks>
    15e2:	d0 91 3a 05 	lds	r29, 0x053A	; 0x80053a <xPendedTicks+0x1>
    15e6:	20 97       	sbiw	r28, 0x00	; 0
    15e8:	69 f0       	breq	.+26     	; 0x1604 <xTaskResumeAll+0x18a>
    15ea:	0e 94 23 09 	call	0x1246	; 0x1246 <xTaskIncrementTick>
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <xTaskResumeAll+0x17e>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <xYieldPendings>
    15f8:	21 97       	sbiw	r28, 0x01	; 1
    15fa:	b9 f7       	brne	.-18     	; 0x15ea <xTaskResumeAll+0x170>
    15fc:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <xPendedTicks+0x1>
    1600:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <xPendedTicks>
    1604:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <xYieldPendings>
    1608:	88 23       	and	r24, r24
    160a:	51 f0       	breq	.+20     	; 0x1620 <xTaskResumeAll+0x1a6>
    160c:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pxCurrentTCB>
    1610:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    1614:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <xTaskResumeAll+0x1a8>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <xTaskResumeAll+0x1a8>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <xTaskDelayUntil>:
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	8c 01       	movw	r16, r24
    1636:	eb 01       	movw	r28, r22
    1638:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSuspendAll>
    163c:	40 91 3d 05 	lds	r20, 0x053D	; 0x80053d <xTickCount>
    1640:	50 91 3e 05 	lds	r21, 0x053E	; 0x80053e <xTickCount+0x1>
    1644:	f8 01       	movw	r30, r16
    1646:	20 81       	ld	r18, Z
    1648:	31 81       	ldd	r19, Z+1	; 0x01
    164a:	c9 01       	movw	r24, r18
    164c:	8c 0f       	add	r24, r28
    164e:	9d 1f       	adc	r25, r29
    1650:	42 17       	cp	r20, r18
    1652:	53 07       	cpc	r21, r19
    1654:	40 f4       	brcc	.+16     	; 0x1666 <xTaskDelayUntil+0x3a>
    1656:	82 17       	cp	r24, r18
    1658:	93 07       	cpc	r25, r19
    165a:	68 f4       	brcc	.+26     	; 0x1676 <xTaskDelayUntil+0x4a>
    165c:	48 17       	cp	r20, r24
    165e:	59 07       	cpc	r21, r25
    1660:	60 f0       	brcs	.+24     	; 0x167a <xTaskDelayUntil+0x4e>
    1662:	c0 e0       	ldi	r28, 0x00	; 0
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <xTaskDelayUntil+0x58>
    1666:	82 17       	cp	r24, r18
    1668:	93 07       	cpc	r25, r19
    166a:	48 f0       	brcs	.+18     	; 0x167e <xTaskDelayUntil+0x52>
    166c:	48 17       	cp	r20, r24
    166e:	59 07       	cpc	r21, r25
    1670:	40 f0       	brcs	.+16     	; 0x1682 <xTaskDelayUntil+0x56>
    1672:	c0 e0       	ldi	r28, 0x00	; 0
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <xTaskDelayUntil+0x58>
    1676:	c0 e0       	ldi	r28, 0x00	; 0
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <xTaskDelayUntil+0x58>
    167a:	c1 e0       	ldi	r28, 0x01	; 1
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <xTaskDelayUntil+0x58>
    167e:	c1 e0       	ldi	r28, 0x01	; 1
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <xTaskDelayUntil+0x58>
    1682:	c1 e0       	ldi	r28, 0x01	; 1
    1684:	f8 01       	movw	r30, r16
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
    168a:	cc 23       	and	r28, r28
    168c:	29 f0       	breq	.+10     	; 0x1698 <xTaskDelayUntil+0x6c>
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	84 1b       	sub	r24, r20
    1692:	95 0b       	sbc	r25, r21
    1694:	0e 94 53 08 	call	0x10a6	; 0x10a6 <prvAddCurrentTaskToDelayedList>
    1698:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
    169c:	81 11       	cpse	r24, r1
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <xTaskDelayUntil+0x78>
    16a0:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
    16a4:	8c 2f       	mov	r24, r28
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <vTaskDelay>:
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
    16b6:	89 2b       	or	r24, r25
    16b8:	49 f0       	breq	.+18     	; 0x16cc <vTaskDelay+0x1c>
    16ba:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSuspendAll>
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	ce 01       	movw	r24, r28
    16c2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <prvAddCurrentTaskToDelayedList>
    16c6:	0e 94 3d 0a 	call	0x147a	; 0x147a <xTaskResumeAll>
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <vTaskDelay+0x1e>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	81 11       	cpse	r24, r1
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <vTaskDelay+0x26>
    16d2:	0e 94 4d 02 	call	0x49a	; 0x49a <vPortYield>
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <vTaskSwitchContext>:
    16dc:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <uxSchedulerSuspended>
    16e0:	88 23       	and	r24, r24
    16e2:	21 f0       	breq	.+8      	; 0x16ec <vTaskSwitchContext+0x10>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <xYieldPendings>
    16ea:	08 95       	ret
    16ec:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <xYieldPendings>
    16f0:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
    16f4:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    16f8:	07 88       	ldd	r0, Z+23	; 0x17
    16fa:	f0 8d       	ldd	r31, Z+24	; 0x18
    16fc:	e0 2d       	mov	r30, r0
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	a2 81       	ldd	r26, Z+2	; 0x02
    1704:	b3 81       	ldd	r27, Z+3	; 0x03
    1706:	85 3a       	cpi	r24, 0xA5	; 165
    1708:	95 4a       	sbci	r25, 0xA5	; 165
    170a:	a5 4a       	sbci	r26, 0xA5	; 165
    170c:	b5 4a       	sbci	r27, 0xA5	; 165
    170e:	d9 f4       	brne	.+54     	; 0x1746 <vTaskSwitchContext+0x6a>
    1710:	84 81       	ldd	r24, Z+4	; 0x04
    1712:	95 81       	ldd	r25, Z+5	; 0x05
    1714:	a6 81       	ldd	r26, Z+6	; 0x06
    1716:	b7 81       	ldd	r27, Z+7	; 0x07
    1718:	85 3a       	cpi	r24, 0xA5	; 165
    171a:	95 4a       	sbci	r25, 0xA5	; 165
    171c:	a5 4a       	sbci	r26, 0xA5	; 165
    171e:	b5 4a       	sbci	r27, 0xA5	; 165
    1720:	91 f4       	brne	.+36     	; 0x1746 <vTaskSwitchContext+0x6a>
    1722:	80 85       	ldd	r24, Z+8	; 0x08
    1724:	91 85       	ldd	r25, Z+9	; 0x09
    1726:	a2 85       	ldd	r26, Z+10	; 0x0a
    1728:	b3 85       	ldd	r27, Z+11	; 0x0b
    172a:	85 3a       	cpi	r24, 0xA5	; 165
    172c:	95 4a       	sbci	r25, 0xA5	; 165
    172e:	a5 4a       	sbci	r26, 0xA5	; 165
    1730:	b5 4a       	sbci	r27, 0xA5	; 165
    1732:	49 f4       	brne	.+18     	; 0x1746 <vTaskSwitchContext+0x6a>
    1734:	84 85       	ldd	r24, Z+12	; 0x0c
    1736:	95 85       	ldd	r25, Z+13	; 0x0d
    1738:	a6 85       	ldd	r26, Z+14	; 0x0e
    173a:	b7 85       	ldd	r27, Z+15	; 0x0f
    173c:	85 3a       	cpi	r24, 0xA5	; 165
    173e:	95 4a       	sbci	r25, 0xA5	; 165
    1740:	a5 4a       	sbci	r26, 0xA5	; 165
    1742:	b5 4a       	sbci	r27, 0xA5	; 165
    1744:	61 f0       	breq	.+24     	; 0x175e <vTaskSwitchContext+0x82>
    1746:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <pxCurrentTCB>
    174a:	70 91 84 05 	lds	r23, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    174e:	67 5e       	subi	r22, 0xE7	; 231
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pxCurrentTCB>
    1756:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    175a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <vApplicationStackOverflowHook>
    175e:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <uxTopReadyPriority>
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <vTaskSwitchContext+0x8a>
    1764:	21 50       	subi	r18, 0x01	; 1
    1766:	82 2f       	mov	r24, r18
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	fc 01       	movw	r30, r24
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	e8 0f       	add	r30, r24
    177a:	f9 1f       	adc	r31, r25
    177c:	e1 5a       	subi	r30, 0xA1	; 161
    177e:	fa 4f       	sbci	r31, 0xFA	; 250
    1780:	30 81       	ld	r19, Z
    1782:	33 23       	and	r19, r19
    1784:	79 f3       	breq	.-34     	; 0x1764 <vTaskSwitchContext+0x88>
    1786:	ac 01       	movw	r20, r24
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	44 0f       	add	r20, r20
    178e:	55 1f       	adc	r21, r21
    1790:	44 0f       	add	r20, r20
    1792:	55 1f       	adc	r21, r21
    1794:	48 0f       	add	r20, r24
    1796:	59 1f       	adc	r21, r25
    1798:	fa 01       	movw	r30, r20
    179a:	e1 5a       	subi	r30, 0xA1	; 161
    179c:	fa 4f       	sbci	r31, 0xFA	; 250
    179e:	a1 81       	ldd	r26, Z+1	; 0x01
    17a0:	b2 81       	ldd	r27, Z+2	; 0x02
    17a2:	12 96       	adiw	r26, 0x02	; 2
    17a4:	6d 91       	ld	r22, X+
    17a6:	7c 91       	ld	r23, X
    17a8:	13 97       	sbiw	r26, 0x03	; 3
    17aa:	72 83       	std	Z+2, r23	; 0x02
    17ac:	61 83       	std	Z+1, r22	; 0x01
    17ae:	4e 59       	subi	r20, 0x9E	; 158
    17b0:	5a 4f       	sbci	r21, 0xFA	; 250
    17b2:	64 17       	cp	r22, r20
    17b4:	75 07       	cpc	r23, r21
    17b6:	79 f4       	brne	.+30     	; 0x17d6 <vTaskSwitchContext+0xfa>
    17b8:	fc 01       	movw	r30, r24
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	e8 0f       	add	r30, r24
    17c8:	f9 1f       	adc	r31, r25
    17ca:	e1 5a       	subi	r30, 0xA1	; 161
    17cc:	fa 4f       	sbci	r31, 0xFA	; 250
    17ce:	45 81       	ldd	r20, Z+5	; 0x05
    17d0:	56 81       	ldd	r21, Z+6	; 0x06
    17d2:	52 83       	std	Z+2, r21	; 0x02
    17d4:	41 83       	std	Z+1, r20	; 0x01
    17d6:	fc 01       	movw	r30, r24
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	ee 0f       	add	r30, r30
    17e2:	ff 1f       	adc	r31, r31
    17e4:	8e 0f       	add	r24, r30
    17e6:	9f 1f       	adc	r25, r31
    17e8:	fc 01       	movw	r30, r24
    17ea:	e1 5a       	subi	r30, 0xA1	; 161
    17ec:	fa 4f       	sbci	r31, 0xFA	; 250
    17ee:	01 80       	ldd	r0, Z+1	; 0x01
    17f0:	f2 81       	ldd	r31, Z+2	; 0x02
    17f2:	e0 2d       	mov	r30, r0
    17f4:	86 81       	ldd	r24, Z+6	; 0x06
    17f6:	97 81       	ldd	r25, Z+7	; 0x07
    17f8:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <pxCurrentTCB+0x1>
    17fc:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <pxCurrentTCB>
    1800:	20 93 3c 05 	sts	0x053C, r18	; 0x80053c <uxTopReadyPriority>
    1804:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pxCurrentTCB>
    1808:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    180c:	08 95       	ret

0000180e <vTaskPlaceOnEventList>:
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	eb 01       	movw	r28, r22
    1814:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <pxCurrentTCB>
    1818:	70 91 84 05 	lds	r23, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    181c:	64 5f       	subi	r22, 0xF4	; 244
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	0e 94 4d 01 	call	0x29a	; 0x29a <vListInsert>
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	ce 01       	movw	r24, r28
    1828:	0e 94 53 08 	call	0x10a6	; 0x10a6 <prvAddCurrentTaskToDelayedList>
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <xTaskRemoveFromEventList>:
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	dc 01       	movw	r26, r24
    1838:	15 96       	adiw	r26, 0x05	; 5
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	16 97       	sbiw	r26, 0x06	; 6
    1840:	06 80       	ldd	r0, Z+6	; 0x06
    1842:	f7 81       	ldd	r31, Z+7	; 0x07
    1844:	e0 2d       	mov	r30, r0
    1846:	a4 89       	ldd	r26, Z+20	; 0x14
    1848:	b5 89       	ldd	r27, Z+21	; 0x15
    184a:	c6 85       	ldd	r28, Z+14	; 0x0e
    184c:	d7 85       	ldd	r29, Z+15	; 0x0f
    184e:	80 89       	ldd	r24, Z+16	; 0x10
    1850:	91 89       	ldd	r25, Z+17	; 0x11
    1852:	9d 83       	std	Y+5, r25	; 0x05
    1854:	8c 83       	std	Y+4, r24	; 0x04
    1856:	c0 89       	ldd	r28, Z+16	; 0x10
    1858:	d1 89       	ldd	r29, Z+17	; 0x11
    185a:	86 85       	ldd	r24, Z+14	; 0x0e
    185c:	97 85       	ldd	r25, Z+15	; 0x0f
    185e:	9b 83       	std	Y+3, r25	; 0x03
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	11 96       	adiw	r26, 0x01	; 1
    1864:	8d 91       	ld	r24, X+
    1866:	9c 91       	ld	r25, X
    1868:	12 97       	sbiw	r26, 0x02	; 2
    186a:	9f 01       	movw	r18, r30
    186c:	24 5f       	subi	r18, 0xF4	; 244
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	82 17       	cp	r24, r18
    1872:	93 07       	cpc	r25, r19
    1874:	31 f4       	brne	.+12     	; 0x1882 <xTaskRemoveFromEventList+0x50>
    1876:	80 89       	ldd	r24, Z+16	; 0x10
    1878:	91 89       	ldd	r25, Z+17	; 0x11
    187a:	12 96       	adiw	r26, 0x02	; 2
    187c:	9c 93       	st	X, r25
    187e:	8e 93       	st	-X, r24
    1880:	11 97       	sbiw	r26, 0x01	; 1
    1882:	15 8a       	std	Z+21, r1	; 0x15
    1884:	14 8a       	std	Z+20, r1	; 0x14
    1886:	8c 91       	ld	r24, X
    1888:	81 50       	subi	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
    188c:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <uxSchedulerSuspended>
    1890:	81 11       	cpse	r24, r1
    1892:	60 c0       	rjmp	.+192    	; 0x1954 <xTaskRemoveFromEventList+0x122>
    1894:	a2 85       	ldd	r26, Z+10	; 0x0a
    1896:	b3 85       	ldd	r27, Z+11	; 0x0b
    1898:	c4 81       	ldd	r28, Z+4	; 0x04
    189a:	d5 81       	ldd	r29, Z+5	; 0x05
    189c:	86 81       	ldd	r24, Z+6	; 0x06
    189e:	97 81       	ldd	r25, Z+7	; 0x07
    18a0:	9d 83       	std	Y+5, r25	; 0x05
    18a2:	8c 83       	std	Y+4, r24	; 0x04
    18a4:	c6 81       	ldd	r28, Z+6	; 0x06
    18a6:	d7 81       	ldd	r29, Z+7	; 0x07
    18a8:	84 81       	ldd	r24, Z+4	; 0x04
    18aa:	95 81       	ldd	r25, Z+5	; 0x05
    18ac:	9b 83       	std	Y+3, r25	; 0x03
    18ae:	8a 83       	std	Y+2, r24	; 0x02
    18b0:	11 96       	adiw	r26, 0x01	; 1
    18b2:	8d 91       	ld	r24, X+
    18b4:	9c 91       	ld	r25, X
    18b6:	12 97       	sbiw	r26, 0x02	; 2
    18b8:	9f 01       	movw	r18, r30
    18ba:	2e 5f       	subi	r18, 0xFE	; 254
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	82 17       	cp	r24, r18
    18c0:	93 07       	cpc	r25, r19
    18c2:	31 f4       	brne	.+12     	; 0x18d0 <xTaskRemoveFromEventList+0x9e>
    18c4:	86 81       	ldd	r24, Z+6	; 0x06
    18c6:	97 81       	ldd	r25, Z+7	; 0x07
    18c8:	12 96       	adiw	r26, 0x02	; 2
    18ca:	9c 93       	st	X, r25
    18cc:	8e 93       	st	-X, r24
    18ce:	11 97       	sbiw	r26, 0x01	; 1
    18d0:	13 86       	std	Z+11, r1	; 0x0b
    18d2:	12 86       	std	Z+10, r1	; 0x0a
    18d4:	8c 91       	ld	r24, X
    18d6:	81 50       	subi	r24, 0x01	; 1
    18d8:	8c 93       	st	X, r24
    18da:	86 89       	ldd	r24, Z+22	; 0x16
    18dc:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <uxTopReadyPriority>
    18e0:	98 17       	cp	r25, r24
    18e2:	10 f4       	brcc	.+4      	; 0x18e8 <xTaskRemoveFromEventList+0xb6>
    18e4:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <uxTopReadyPriority>
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	dc 01       	movw	r26, r24
    18ec:	aa 0f       	add	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	aa 0f       	add	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	aa 0f       	add	r26, r26
    18f6:	bb 1f       	adc	r27, r27
    18f8:	8a 0f       	add	r24, r26
    18fa:	9b 1f       	adc	r25, r27
    18fc:	dc 01       	movw	r26, r24
    18fe:	a1 5a       	subi	r26, 0xA1	; 161
    1900:	ba 4f       	sbci	r27, 0xFA	; 250
    1902:	11 96       	adiw	r26, 0x01	; 1
    1904:	0d 90       	ld	r0, X+
    1906:	bc 91       	ld	r27, X
    1908:	a0 2d       	mov	r26, r0
    190a:	b5 83       	std	Z+5, r27	; 0x05
    190c:	a4 83       	std	Z+4, r26	; 0x04
    190e:	14 96       	adiw	r26, 0x04	; 4
    1910:	8d 91       	ld	r24, X+
    1912:	9c 91       	ld	r25, X
    1914:	15 97       	sbiw	r26, 0x05	; 5
    1916:	97 83       	std	Z+7, r25	; 0x07
    1918:	86 83       	std	Z+6, r24	; 0x06
    191a:	14 96       	adiw	r26, 0x04	; 4
    191c:	cd 91       	ld	r28, X+
    191e:	dc 91       	ld	r29, X
    1920:	15 97       	sbiw	r26, 0x05	; 5
    1922:	3b 83       	std	Y+3, r19	; 0x03
    1924:	2a 83       	std	Y+2, r18	; 0x02
    1926:	15 96       	adiw	r26, 0x05	; 5
    1928:	3c 93       	st	X, r19
    192a:	2e 93       	st	-X, r18
    192c:	14 97       	sbiw	r26, 0x04	; 4
    192e:	a6 89       	ldd	r26, Z+22	; 0x16
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	cd 01       	movw	r24, r26
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	a8 0f       	add	r26, r24
    1942:	b9 1f       	adc	r27, r25
    1944:	a1 5a       	subi	r26, 0xA1	; 161
    1946:	ba 4f       	sbci	r27, 0xFA	; 250
    1948:	b3 87       	std	Z+11, r27	; 0x0b
    194a:	a2 87       	std	Z+10, r26	; 0x0a
    194c:	8c 91       	ld	r24, X
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	8c 93       	st	X, r24
    1952:	1c c0       	rjmp	.+56     	; 0x198c <xTaskRemoveFromEventList+0x15a>
    1954:	40 e4       	ldi	r20, 0x40	; 64
    1956:	55 e0       	ldi	r21, 0x05	; 5
    1958:	da 01       	movw	r26, r20
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	cd 91       	ld	r28, X+
    195e:	dc 91       	ld	r29, X
    1960:	12 97       	sbiw	r26, 0x02	; 2
    1962:	d7 87       	std	Z+15, r29	; 0x0f
    1964:	c6 87       	std	Z+14, r28	; 0x0e
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	91 8b       	std	Z+17, r25	; 0x11
    196c:	80 8b       	std	Z+16, r24	; 0x10
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	dc 01       	movw	r26, r24
    1974:	13 96       	adiw	r26, 0x03	; 3
    1976:	3c 93       	st	X, r19
    1978:	2e 93       	st	-X, r18
    197a:	12 97       	sbiw	r26, 0x02	; 2
    197c:	3d 83       	std	Y+5, r19	; 0x05
    197e:	2c 83       	std	Y+4, r18	; 0x04
    1980:	55 8b       	std	Z+21, r21	; 0x15
    1982:	44 8b       	std	Z+20, r20	; 0x14
    1984:	da 01       	movw	r26, r20
    1986:	8c 91       	ld	r24, X
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	8c 93       	st	X, r24
    198c:	96 89       	ldd	r25, Z+22	; 0x16
    198e:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pxCurrentTCB>
    1992:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pxCurrentTCB+0x1>
    1996:	86 89       	ldd	r24, Z+22	; 0x16
    1998:	89 17       	cp	r24, r25
    199a:	20 f4       	brcc	.+8      	; 0x19a4 <xTaskRemoveFromEventList+0x172>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <xYieldPendings>
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <xTaskRemoveFromEventList+0x174>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <vTaskInternalSetTimeOutState>:
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    19ac:	20 91 37 05 	lds	r18, 0x0537	; 0x800537 <xNumOfOverflows>
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    19b4:	20 91 3d 05 	lds	r18, 0x053D	; 0x80053d <xTickCount>
    19b8:	30 91 3e 05 	lds	r19, 0x053E	; 0x80053e <xTickCount+0x1>
    19bc:	32 83       	std	Z+2, r19	; 0x02
    19be:	21 83       	std	Z+1, r18	; 0x01
    19c0:	08 95       	ret

000019c2 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    19cc:	40 91 3d 05 	lds	r20, 0x053D	; 0x80053d <xTickCount>
    19d0:	50 91 3e 05 	lds	r21, 0x053E	; 0x80053e <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    19d4:	ec 01       	movw	r28, r24
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	3a 81       	ldd	r19, Y+2	; 0x02
    19da:	da 01       	movw	r26, r20
    19dc:	a2 1b       	sub	r26, r18
    19de:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    19e0:	f8 81       	ld	r31, Y
    19e2:	e0 91 37 05 	lds	r30, 0x0537	; 0x800537 <xNumOfOverflows>
    19e6:	fe 17       	cp	r31, r30
    19e8:	41 f0       	breq	.+16     	; 0x19fa <xTaskCheckForTimeOut+0x38>
    19ea:	42 17       	cp	r20, r18
    19ec:	53 07       	cpc	r21, r19
    19ee:	28 f0       	brcs	.+10     	; 0x19fa <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    19f0:	fb 01       	movw	r30, r22
    19f2:	11 82       	std	Z+1, r1	; 0x01
    19f4:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    19f8:	11 c0       	rjmp	.+34     	; 0x1a1c <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait )
    19fa:	eb 01       	movw	r28, r22
    19fc:	28 81       	ld	r18, Y
    19fe:	39 81       	ldd	r19, Y+1	; 0x01
    1a00:	a2 17       	cp	r26, r18
    1a02:	b3 07       	cpc	r27, r19
    1a04:	40 f4       	brcc	.+16     	; 0x1a16 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1a06:	2a 1b       	sub	r18, r26
    1a08:	3b 0b       	sbc	r19, r27
    1a0a:	39 83       	std	Y+1, r19	; 0x01
    1a0c:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1a0e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1a16:	19 82       	std	Y+1, r1	; 0x01
    1a18:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <vTaskMissedYield>:
void vTaskMissedYield( void )
{
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <xYieldPendings>
    1a2c:	08 95       	ret

00001a2e <vSensorTask>:
	//this part is never reached
	while(1);
	return 0;
}

void vSensorTask(void *pvParameters) {
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <vSensorTask+0x6>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <vSensorTask+0x8>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	const TickType_t xDelay = pdMS_TO_TICKS(500);
	float level;
	
	while(1) {
		level = get_water_level_cm();
    1a3a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <get_water_level_cm>
    1a3e:	69 83       	std	Y+1, r22	; 0x01
    1a40:	7a 83       	std	Y+2, r23	; 0x02
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	9c 83       	std	Y+4, r25	; 0x04
		if(level >= 0) {
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__gesf2>
    1a50:	88 23       	and	r24, r24
    1a52:	64 f0       	brlt	.+24     	; 0x1a6c <vSensorTask+0x3e>
			xQueueSend(xLevelQueue, &level, portMAX_DELAY);
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	4f ef       	ldi	r20, 0xFF	; 255
    1a58:	5f ef       	ldi	r21, 0xFF	; 255
    1a5a:	be 01       	movw	r22, r28
    1a5c:	6f 5f       	subi	r22, 0xFF	; 255
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <xLevelQueue>
    1a64:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <xLevelQueue+0x1>
    1a68:	0e 94 ac 05 	call	0xb58	; 0xb58 <xQueueGenericSend>
		}
		vTaskDelay(xDelay);
    1a6c:	84 ef       	ldi	r24, 0xF4	; 244
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <vTaskDelay>
	}
    1a74:	e2 cf       	rjmp	.-60     	; 0x1a3a <vSensorTask+0xc>

00001a76 <vPumpTask>:
}

void vPumpTask(void *pvParameters) {
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <vPumpTask+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <vPumpTask+0x8>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	float level;
	const float target = 30.0f;
	
	while(1) {
		if(xQueueReceive(xLevelQueue, &level, portMAX_DELAY)) {
    1a82:	4f ef       	ldi	r20, 0xFF	; 255
    1a84:	5f ef       	ldi	r21, 0xFF	; 255
    1a86:	be 01       	movw	r22, r28
    1a88:	6f 5f       	subi	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <xLevelQueue>
    1a90:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <xLevelQueue+0x1>
    1a94:	0e 94 3e 06 	call	0xc7c	; 0xc7c <xQueueReceive>
    1a98:	88 23       	and	r24, r24
    1a9a:	99 f3       	breq	.-26     	; 0x1a82 <vPumpTask+0xc>
			if(level > target + 5.0f) {
    1a9c:	c9 80       	ldd	r12, Y+1	; 0x01
    1a9e:	da 80       	ldd	r13, Y+2	; 0x02
    1aa0:	eb 80       	ldd	r14, Y+3	; 0x03
    1aa2:	fc 80       	ldd	r15, Y+4	; 0x04
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4c e0       	ldi	r20, 0x0C	; 12
    1aaa:	52 e4       	ldi	r21, 0x42	; 66
    1aac:	c7 01       	movw	r24, r14
    1aae:	b6 01       	movw	r22, r12
    1ab0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__gesf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	24 f4       	brge	.+8      	; 0x1ac0 <vPumpTask+0x4a>
				set_pump_state(180); // Full speed
    1ab8:	84 eb       	ldi	r24, 0xB4	; 180
    1aba:	0e 94 8f 00 	call	0x11e	; 0x11e <set_pump_state>
    1abe:	e1 cf       	rjmp	.-62     	; 0x1a82 <vPumpTask+0xc>
			}
			else if(level > target) {
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 ef       	ldi	r20, 0xF0	; 240
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	c7 01       	movw	r24, r14
    1aca:	b6 01       	movw	r22, r12
    1acc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__gesf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	24 f4       	brge	.+8      	; 0x1adc <vPumpTask+0x66>
				set_pump_state(90);  // Half speed
    1ad4:	8a e5       	ldi	r24, 0x5A	; 90
    1ad6:	0e 94 8f 00 	call	0x11e	; 0x11e <set_pump_state>
    1ada:	d3 cf       	rjmp	.-90     	; 0x1a82 <vPumpTask+0xc>
			}
			else {
				set_pump_state(0);   // Off
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 8f 00 	call	0x11e	; 0x11e <set_pump_state>
    1ae2:	cf cf       	rjmp	.-98     	; 0x1a82 <vPumpTask+0xc>

00001ae4 <vAlarmTask>:
			}
		}
	}
}

void vAlarmTask(void *pvParameters) {
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <vAlarmTask+0x6>
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <vAlarmTask+0x8>
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	float level;
	WaterLevelState state = LEVEL_NORMAL;
	
	while(1) {
		if(xQueueReceive(xLevelQueue, &level, portMAX_DELAY)) {
    1af0:	4f ef       	ldi	r20, 0xFF	; 255
    1af2:	5f ef       	ldi	r21, 0xFF	; 255
    1af4:	be 01       	movw	r22, r28
    1af6:	6f 5f       	subi	r22, 0xFF	; 255
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <xLevelQueue>
    1afe:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <xLevelQueue+0x1>
    1b02:	0e 94 3e 06 	call	0xc7c	; 0xc7c <xQueueReceive>
    1b06:	88 23       	and	r24, r24
    1b08:	99 f3       	breq	.-26     	; 0x1af0 <vAlarmTask+0xc>
			if(level > 50.0f) {
    1b0a:	c9 80       	ldd	r12, Y+1	; 0x01
    1b0c:	da 80       	ldd	r13, Y+2	; 0x02
    1b0e:	eb 80       	ldd	r14, Y+3	; 0x03
    1b10:	fc 80       	ldd	r15, Y+4	; 0x04
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	48 e4       	ldi	r20, 0x48	; 72
    1b18:	52 e4       	ldi	r21, 0x42	; 66
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	b6 01       	movw	r22, r12
    1b1e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__gesf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	64 f0       	brlt	.+24     	; 0x1b3e <vAlarmTask+0x5a>
				state = LEVEL_CRITICAL;
			}
			else if(level > 40.0f) {
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	52 e4       	ldi	r21, 0x42	; 66
    1b2e:	c7 01       	movw	r24, r14
    1b30:	b6 01       	movw	r22, r12
    1b32:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__gesf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	24 f4       	brge	.+8      	; 0x1b42 <vAlarmTask+0x5e>
				state = LEVEL_WARNING;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <vAlarmTask+0x60>
	WaterLevelState state = LEVEL_NORMAL;
	
	while(1) {
		if(xQueueReceive(xLevelQueue, &level, portMAX_DELAY)) {
			if(level > 50.0f) {
				state = LEVEL_CRITICAL;
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <vAlarmTask+0x60>
			}
			else if(level > 40.0f) {
				state = LEVEL_WARNING;
			}
			else {
				state = LEVEL_NORMAL;
    1b42:	80 e0       	ldi	r24, 0x00	; 0
			}
			update_alarms(state);
    1b44:	0e 94 5a 00 	call	0xb4	; 0xb4 <update_alarms>
    1b48:	d3 cf       	rjmp	.-90     	; 0x1af0 <vAlarmTask+0xc>

00001b4a <main>:
void vAlarmTask(void *pvParameters);


int main(void) {
	// Initialize hardware
	ultrasonic_init();
    1b4a:	0e 94 99 00 	call	0x132	; 0x132 <ultrasonic_init>
	pump_init();
    1b4e:	0e 94 84 00 	call	0x108	; 0x108 <pump_init>
	alarms_init();
    1b52:	0e 94 53 00 	call	0xa6	; 0xa6 <alarms_init>
	
	// Create communication queue
	xLevelQueue = xQueueCreate(5, sizeof(float));
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	85 e0       	ldi	r24, 0x05	; 5
    1b5c:	0e 94 6b 05 	call	0xad6	; 0xad6 <xQueueGenericCreate>
    1b60:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <xLevelQueue+0x1>
    1b64:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <xLevelQueue>
	
	// Create tasks
	xTaskCreate(vSensorTask, "Sensor", 128, NULL, 3, NULL);
    1b68:	e1 2c       	mov	r14, r1
    1b6a:	f1 2c       	mov	r15, r1
    1b6c:	03 e0       	ldi	r16, 0x03	; 3
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	66 e0       	ldi	r22, 0x06	; 6
    1b76:	71 e0       	ldi	r23, 0x01	; 1
    1b78:	87 e1       	ldi	r24, 0x17	; 23
    1b7a:	9d e0       	ldi	r25, 0x0D	; 13
    1b7c:	0e 94 a1 08 	call	0x1142	; 0x1142 <xTaskCreate>
	xTaskCreate(vPumpTask, "Pump", 128, NULL, 2, NULL);
    1b80:	02 e0       	ldi	r16, 0x02	; 2
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	6d e0       	ldi	r22, 0x0D	; 13
    1b8a:	71 e0       	ldi	r23, 0x01	; 1
    1b8c:	8b e3       	ldi	r24, 0x3B	; 59
    1b8e:	9d e0       	ldi	r25, 0x0D	; 13
    1b90:	0e 94 a1 08 	call	0x1142	; 0x1142 <xTaskCreate>
	xTaskCreate(vAlarmTask, "Alarm", 128, NULL, 1, NULL);
    1b94:	01 e0       	ldi	r16, 0x01	; 1
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	62 e1       	ldi	r22, 0x12	; 18
    1b9e:	71 e0       	ldi	r23, 0x01	; 1
    1ba0:	82 e7       	ldi	r24, 0x72	; 114
    1ba2:	9d e0       	ldi	r25, 0x0D	; 13
    1ba4:	0e 94 a1 08 	call	0x1142	; 0x1142 <xTaskCreate>
	
	// Start scheduler
	vTaskStartScheduler();
    1ba8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <vTaskStartScheduler>
    1bac:	ff cf       	rjmp	.-2      	; 0x1bac <main+0x62>

00001bae <vApplicationStackOverflowHook>:
	}
}

// Error handlers
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
	PORTC = (1 << RED_PIN);
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	88 b9       	out	0x08, r24	; 8
	BUZZER_PORT |= (1 << BUZZER_PIN);
    1bb2:	88 b1       	in	r24, 0x08	; 8
    1bb4:	81 60       	ori	r24, 0x01	; 1
    1bb6:	88 b9       	out	0x08, r24	; 8
    1bb8:	ff cf       	rjmp	.-2      	; 0x1bb8 <vApplicationStackOverflowHook+0xa>

00001bba <vApplicationMallocFailedHook>:
	while(1);
}

void vApplicationMallocFailedHook(void) {
	PORTC = (1 << YELLOW_PIN) | (1 << RED_PIN);
    1bba:	8c e0       	ldi	r24, 0x0C	; 12
    1bbc:	88 b9       	out	0x08, r24	; 8
    1bbe:	ff cf       	rjmp	.-2      	; 0x1bbe <vApplicationMallocFailedHook+0x4>

00001bc0 <__floatunsisf>:
    1bc0:	e8 94       	clt
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <__floatsisf+0x12>

00001bc4 <__floatsisf>:
    1bc4:	97 fb       	bst	r25, 7
    1bc6:	3e f4       	brtc	.+14     	; 0x1bd6 <__floatsisf+0x12>
    1bc8:	90 95       	com	r25
    1bca:	80 95       	com	r24
    1bcc:	70 95       	com	r23
    1bce:	61 95       	neg	r22
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	99 23       	and	r25, r25
    1bd8:	a9 f0       	breq	.+42     	; 0x1c04 <__floatsisf+0x40>
    1bda:	f9 2f       	mov	r31, r25
    1bdc:	96 e9       	ldi	r25, 0x96	; 150
    1bde:	bb 27       	eor	r27, r27
    1be0:	93 95       	inc	r25
    1be2:	f6 95       	lsr	r31
    1be4:	87 95       	ror	r24
    1be6:	77 95       	ror	r23
    1be8:	67 95       	ror	r22
    1bea:	b7 95       	ror	r27
    1bec:	f1 11       	cpse	r31, r1
    1bee:	f8 cf       	rjmp	.-16     	; 0x1be0 <__floatsisf+0x1c>
    1bf0:	fa f4       	brpl	.+62     	; 0x1c30 <__floatsisf+0x6c>
    1bf2:	bb 0f       	add	r27, r27
    1bf4:	11 f4       	brne	.+4      	; 0x1bfa <__floatsisf+0x36>
    1bf6:	60 ff       	sbrs	r22, 0
    1bf8:	1b c0       	rjmp	.+54     	; 0x1c30 <__floatsisf+0x6c>
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	16 c0       	rjmp	.+44     	; 0x1c30 <__floatsisf+0x6c>
    1c04:	88 23       	and	r24, r24
    1c06:	11 f0       	breq	.+4      	; 0x1c0c <__floatsisf+0x48>
    1c08:	96 e9       	ldi	r25, 0x96	; 150
    1c0a:	11 c0       	rjmp	.+34     	; 0x1c2e <__floatsisf+0x6a>
    1c0c:	77 23       	and	r23, r23
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <__floatsisf+0x54>
    1c10:	9e e8       	ldi	r25, 0x8E	; 142
    1c12:	87 2f       	mov	r24, r23
    1c14:	76 2f       	mov	r23, r22
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <__floatsisf+0x5e>
    1c18:	66 23       	and	r22, r22
    1c1a:	71 f0       	breq	.+28     	; 0x1c38 <__floatsisf+0x74>
    1c1c:	96 e8       	ldi	r25, 0x86	; 134
    1c1e:	86 2f       	mov	r24, r22
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	2a f0       	brmi	.+10     	; 0x1c30 <__floatsisf+0x6c>
    1c26:	9a 95       	dec	r25
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	da f7       	brpl	.-10     	; 0x1c26 <__floatsisf+0x62>
    1c30:	88 0f       	add	r24, r24
    1c32:	96 95       	lsr	r25
    1c34:	87 95       	ror	r24
    1c36:	97 f9       	bld	r25, 7
    1c38:	08 95       	ret

00001c3a <__gesf2>:
    1c3a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__fp_cmp>
    1c3e:	08 f4       	brcc	.+2      	; 0x1c42 <__gesf2+0x8>
    1c40:	8f ef       	ldi	r24, 0xFF	; 255
    1c42:	08 95       	ret

00001c44 <__mulsf3>:
    1c44:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__mulsf3x>
    1c48:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_round>
    1c4c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_pscA>
    1c50:	38 f0       	brcs	.+14     	; 0x1c60 <__mulsf3+0x1c>
    1c52:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__fp_pscB>
    1c56:	20 f0       	brcs	.+8      	; 0x1c60 <__mulsf3+0x1c>
    1c58:	95 23       	and	r25, r21
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <__mulsf3+0x1c>
    1c5c:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_inf>
    1c60:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_nan>
    1c64:	11 24       	eor	r1, r1
    1c66:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__fp_szero>

00001c6a <__mulsf3x>:
    1c6a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_split3>
    1c6e:	70 f3       	brcs	.-36     	; 0x1c4c <__mulsf3+0x8>

00001c70 <__mulsf3_pse>:
    1c70:	95 9f       	mul	r25, r21
    1c72:	c1 f3       	breq	.-16     	; 0x1c64 <__mulsf3+0x20>
    1c74:	95 0f       	add	r25, r21
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	55 1f       	adc	r21, r21
    1c7a:	62 9f       	mul	r22, r18
    1c7c:	f0 01       	movw	r30, r0
    1c7e:	72 9f       	mul	r23, r18
    1c80:	bb 27       	eor	r27, r27
    1c82:	f0 0d       	add	r31, r0
    1c84:	b1 1d       	adc	r27, r1
    1c86:	63 9f       	mul	r22, r19
    1c88:	aa 27       	eor	r26, r26
    1c8a:	f0 0d       	add	r31, r0
    1c8c:	b1 1d       	adc	r27, r1
    1c8e:	aa 1f       	adc	r26, r26
    1c90:	64 9f       	mul	r22, r20
    1c92:	66 27       	eor	r22, r22
    1c94:	b0 0d       	add	r27, r0
    1c96:	a1 1d       	adc	r26, r1
    1c98:	66 1f       	adc	r22, r22
    1c9a:	82 9f       	mul	r24, r18
    1c9c:	22 27       	eor	r18, r18
    1c9e:	b0 0d       	add	r27, r0
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	62 1f       	adc	r22, r18
    1ca4:	73 9f       	mul	r23, r19
    1ca6:	b0 0d       	add	r27, r0
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	62 1f       	adc	r22, r18
    1cac:	83 9f       	mul	r24, r19
    1cae:	a0 0d       	add	r26, r0
    1cb0:	61 1d       	adc	r22, r1
    1cb2:	22 1f       	adc	r18, r18
    1cb4:	74 9f       	mul	r23, r20
    1cb6:	33 27       	eor	r19, r19
    1cb8:	a0 0d       	add	r26, r0
    1cba:	61 1d       	adc	r22, r1
    1cbc:	23 1f       	adc	r18, r19
    1cbe:	84 9f       	mul	r24, r20
    1cc0:	60 0d       	add	r22, r0
    1cc2:	21 1d       	adc	r18, r1
    1cc4:	82 2f       	mov	r24, r18
    1cc6:	76 2f       	mov	r23, r22
    1cc8:	6a 2f       	mov	r22, r26
    1cca:	11 24       	eor	r1, r1
    1ccc:	9f 57       	subi	r25, 0x7F	; 127
    1cce:	50 40       	sbci	r21, 0x00	; 0
    1cd0:	9a f0       	brmi	.+38     	; 0x1cf8 <__mulsf3_pse+0x88>
    1cd2:	f1 f0       	breq	.+60     	; 0x1d10 <__mulsf3_pse+0xa0>
    1cd4:	88 23       	and	r24, r24
    1cd6:	4a f0       	brmi	.+18     	; 0x1cea <__mulsf3_pse+0x7a>
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	66 1f       	adc	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	91 50       	subi	r25, 0x01	; 1
    1ce6:	50 40       	sbci	r21, 0x00	; 0
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__mulsf3_pse+0x64>
    1cea:	9e 3f       	cpi	r25, 0xFE	; 254
    1cec:	51 05       	cpc	r21, r1
    1cee:	80 f0       	brcs	.+32     	; 0x1d10 <__mulsf3_pse+0xa0>
    1cf0:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_inf>
    1cf4:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__fp_szero>
    1cf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cfa:	e4 f3       	brlt	.-8      	; 0x1cf4 <__mulsf3_pse+0x84>
    1cfc:	98 3e       	cpi	r25, 0xE8	; 232
    1cfe:	d4 f3       	brlt	.-12     	; 0x1cf4 <__mulsf3_pse+0x84>
    1d00:	86 95       	lsr	r24
    1d02:	77 95       	ror	r23
    1d04:	67 95       	ror	r22
    1d06:	b7 95       	ror	r27
    1d08:	f7 95       	ror	r31
    1d0a:	e7 95       	ror	r30
    1d0c:	9f 5f       	subi	r25, 0xFF	; 255
    1d0e:	c1 f7       	brne	.-16     	; 0x1d00 <__mulsf3_pse+0x90>
    1d10:	fe 2b       	or	r31, r30
    1d12:	88 0f       	add	r24, r24
    1d14:	91 1d       	adc	r25, r1
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	08 95       	ret

00001d1e <__fp_cmp>:
    1d1e:	99 0f       	add	r25, r25
    1d20:	00 08       	sbc	r0, r0
    1d22:	55 0f       	add	r21, r21
    1d24:	aa 0b       	sbc	r26, r26
    1d26:	e0 e8       	ldi	r30, 0x80	; 128
    1d28:	fe ef       	ldi	r31, 0xFE	; 254
    1d2a:	16 16       	cp	r1, r22
    1d2c:	17 06       	cpc	r1, r23
    1d2e:	e8 07       	cpc	r30, r24
    1d30:	f9 07       	cpc	r31, r25
    1d32:	c0 f0       	brcs	.+48     	; 0x1d64 <__fp_cmp+0x46>
    1d34:	12 16       	cp	r1, r18
    1d36:	13 06       	cpc	r1, r19
    1d38:	e4 07       	cpc	r30, r20
    1d3a:	f5 07       	cpc	r31, r21
    1d3c:	98 f0       	brcs	.+38     	; 0x1d64 <__fp_cmp+0x46>
    1d3e:	62 1b       	sub	r22, r18
    1d40:	73 0b       	sbc	r23, r19
    1d42:	84 0b       	sbc	r24, r20
    1d44:	95 0b       	sbc	r25, r21
    1d46:	39 f4       	brne	.+14     	; 0x1d56 <__fp_cmp+0x38>
    1d48:	0a 26       	eor	r0, r26
    1d4a:	61 f0       	breq	.+24     	; 0x1d64 <__fp_cmp+0x46>
    1d4c:	23 2b       	or	r18, r19
    1d4e:	24 2b       	or	r18, r20
    1d50:	25 2b       	or	r18, r21
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <__fp_cmp+0x3e>
    1d54:	08 95       	ret
    1d56:	0a 26       	eor	r0, r26
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <__fp_cmp+0x3e>
    1d5a:	a1 40       	sbci	r26, 0x01	; 1
    1d5c:	a6 95       	lsr	r26
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	81 1d       	adc	r24, r1
    1d62:	81 1d       	adc	r24, r1
    1d64:	08 95       	ret

00001d66 <__fp_inf>:
    1d66:	97 f9       	bld	r25, 7
    1d68:	9f 67       	ori	r25, 0x7F	; 127
    1d6a:	80 e8       	ldi	r24, 0x80	; 128
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	08 95       	ret

00001d72 <__fp_nan>:
    1d72:	9f ef       	ldi	r25, 0xFF	; 255
    1d74:	80 ec       	ldi	r24, 0xC0	; 192
    1d76:	08 95       	ret

00001d78 <__fp_pscA>:
    1d78:	00 24       	eor	r0, r0
    1d7a:	0a 94       	dec	r0
    1d7c:	16 16       	cp	r1, r22
    1d7e:	17 06       	cpc	r1, r23
    1d80:	18 06       	cpc	r1, r24
    1d82:	09 06       	cpc	r0, r25
    1d84:	08 95       	ret

00001d86 <__fp_pscB>:
    1d86:	00 24       	eor	r0, r0
    1d88:	0a 94       	dec	r0
    1d8a:	12 16       	cp	r1, r18
    1d8c:	13 06       	cpc	r1, r19
    1d8e:	14 06       	cpc	r1, r20
    1d90:	05 06       	cpc	r0, r21
    1d92:	08 95       	ret

00001d94 <__fp_round>:
    1d94:	09 2e       	mov	r0, r25
    1d96:	03 94       	inc	r0
    1d98:	00 0c       	add	r0, r0
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <__fp_round+0xc>
    1d9c:	88 23       	and	r24, r24
    1d9e:	52 f0       	brmi	.+20     	; 0x1db4 <__fp_round+0x20>
    1da0:	bb 0f       	add	r27, r27
    1da2:	40 f4       	brcc	.+16     	; 0x1db4 <__fp_round+0x20>
    1da4:	bf 2b       	or	r27, r31
    1da6:	11 f4       	brne	.+4      	; 0x1dac <__fp_round+0x18>
    1da8:	60 ff       	sbrs	r22, 0
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <__fp_round+0x20>
    1dac:	6f 5f       	subi	r22, 0xFF	; 255
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	8f 4f       	sbci	r24, 0xFF	; 255
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	08 95       	ret

00001db6 <__fp_split3>:
    1db6:	57 fd       	sbrc	r21, 7
    1db8:	90 58       	subi	r25, 0x80	; 128
    1dba:	44 0f       	add	r20, r20
    1dbc:	55 1f       	adc	r21, r21
    1dbe:	59 f0       	breq	.+22     	; 0x1dd6 <__fp_splitA+0x10>
    1dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc2:	71 f0       	breq	.+28     	; 0x1de0 <__fp_splitA+0x1a>
    1dc4:	47 95       	ror	r20

00001dc6 <__fp_splitA>:
    1dc6:	88 0f       	add	r24, r24
    1dc8:	97 fb       	bst	r25, 7
    1dca:	99 1f       	adc	r25, r25
    1dcc:	61 f0       	breq	.+24     	; 0x1de6 <__fp_splitA+0x20>
    1dce:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd0:	79 f0       	breq	.+30     	; 0x1df0 <__fp_splitA+0x2a>
    1dd2:	87 95       	ror	r24
    1dd4:	08 95       	ret
    1dd6:	12 16       	cp	r1, r18
    1dd8:	13 06       	cpc	r1, r19
    1dda:	14 06       	cpc	r1, r20
    1ddc:	55 1f       	adc	r21, r21
    1dde:	f2 cf       	rjmp	.-28     	; 0x1dc4 <__fp_split3+0xe>
    1de0:	46 95       	lsr	r20
    1de2:	f1 df       	rcall	.-30     	; 0x1dc6 <__fp_splitA>
    1de4:	08 c0       	rjmp	.+16     	; 0x1df6 <__fp_splitA+0x30>
    1de6:	16 16       	cp	r1, r22
    1de8:	17 06       	cpc	r1, r23
    1dea:	18 06       	cpc	r1, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	f1 cf       	rjmp	.-30     	; 0x1dd2 <__fp_splitA+0xc>
    1df0:	86 95       	lsr	r24
    1df2:	71 05       	cpc	r23, r1
    1df4:	61 05       	cpc	r22, r1
    1df6:	08 94       	sec
    1df8:	08 95       	ret

00001dfa <__fp_zero>:
    1dfa:	e8 94       	clt

00001dfc <__fp_szero>:
    1dfc:	bb 27       	eor	r27, r27
    1dfe:	66 27       	eor	r22, r22
    1e00:	77 27       	eor	r23, r23
    1e02:	cb 01       	movw	r24, r22
    1e04:	97 f9       	bld	r25, 7
    1e06:	08 95       	ret

00001e08 <__udivmodhi4>:
    1e08:	aa 1b       	sub	r26, r26
    1e0a:	bb 1b       	sub	r27, r27
    1e0c:	51 e1       	ldi	r21, 0x11	; 17
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <__udivmodhi4_ep>

00001e10 <__udivmodhi4_loop>:
    1e10:	aa 1f       	adc	r26, r26
    1e12:	bb 1f       	adc	r27, r27
    1e14:	a6 17       	cp	r26, r22
    1e16:	b7 07       	cpc	r27, r23
    1e18:	10 f0       	brcs	.+4      	; 0x1e1e <__udivmodhi4_ep>
    1e1a:	a6 1b       	sub	r26, r22
    1e1c:	b7 0b       	sbc	r27, r23

00001e1e <__udivmodhi4_ep>:
    1e1e:	88 1f       	adc	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	5a 95       	dec	r21
    1e24:	a9 f7       	brne	.-22     	; 0x1e10 <__udivmodhi4_loop>
    1e26:	80 95       	com	r24
    1e28:	90 95       	com	r25
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	08 95       	ret

00001e30 <memcpy>:
    1e30:	fb 01       	movw	r30, r22
    1e32:	dc 01       	movw	r26, r24
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <memcpy+0xa>
    1e36:	01 90       	ld	r0, Z+
    1e38:	0d 92       	st	X+, r0
    1e3a:	41 50       	subi	r20, 0x01	; 1
    1e3c:	50 40       	sbci	r21, 0x00	; 0
    1e3e:	d8 f7       	brcc	.-10     	; 0x1e36 <memcpy+0x6>
    1e40:	08 95       	ret

00001e42 <memset>:
    1e42:	dc 01       	movw	r26, r24
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <memset+0x6>
    1e46:	6d 93       	st	X+, r22
    1e48:	41 50       	subi	r20, 0x01	; 1
    1e4a:	50 40       	sbci	r21, 0x00	; 0
    1e4c:	e0 f7       	brcc	.-8      	; 0x1e46 <memset+0x4>
    1e4e:	08 95       	ret

00001e50 <_exit>:
    1e50:	f8 94       	cli

00001e52 <__stop_program>:
    1e52:	ff cf       	rjmp	.-2      	; 0x1e52 <__stop_program>
